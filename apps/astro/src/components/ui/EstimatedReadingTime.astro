---
import type { PortableTextProps } from 'astro-portabletext/types';

// Note: Calculating words from custom Portable Text is documented, but there is limited information available online.
// As a result, I have implemented my own script to handle word count and estimated reading time for custom blocks (sections).
// Please note that this implementation is not ideal, as it may not handle all edge cases or be the most efficient in terms of type handling.
// However, it currently meets our needs and will remain in place for the time being.
function toPlainText(blocks: PortableTextProps['value']) {
  function extractTextFromBlock(block: any): string {
    if (!block) return '';
    // Handle regular text blocks (most common case)
    if (block._type === 'block' && block.children) {
      return block.children.map((child: any) => child.text || '').join('');
    }
    // Skip specific types we don't want to count
    if (block._type === 'image' || block._type === 'reference') {
      return '';
    }
    // Handle arrays (for nested content)
    if (Array.isArray(block)) {
      return block.map((item) => extractTextFromBlock(item)).join(' ');
    }
    // Handle objects (for custom components and nested structures)
    if (typeof block === 'object' && block !== null) {
      // Skip internal properties and metadata
      const relevantValues = Object.entries(block)
        .filter(([key]) => !key.startsWith('_') && !['asset', 'reference'].includes(key))
        .map(([, value]) => extractTextFromBlock(value));
      return relevantValues.join(' ');
    }
    // Handle primitive values - only include strings
    return typeof block === 'string' ? block : '';
  }
  return (Array.isArray(blocks) ? blocks : [blocks])
    .map((block: any) => extractTextFromBlock(block))
    .filter((text: string) => text.trim() !== '')
    .join('\n\n');
}

const readingTime = (text: string) => {
  const countWords = (text: string) => {
    const trimmedText = text.trim();
    if (trimmedText === '') return 0;
    const words = trimmedText.split(/\s+/);
    return words.length;
  };
  const words = countWords(text);
  const averageReadingSpeedWordsPerMinute = 200;
  const readingTime = Math.ceil(words / averageReadingSpeedWordsPerMinute);
  return readingTime;
};

export type EstimatedReadingTimeProps = {
  content: PortableTextProps['value'];
};

const { content } = Astro.props as EstimatedReadingTimeProps;
---

<p class="estimated-reading-time">
  <svg xmlns="http://www.w3.org/2000/svg" width="15" height="14" fill="none">
    <path
      stroke="#9E9781"
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="1.25"
      d="M7.5 3.5V7l2.333 1.167M13.333 7A5.833 5.833 0 1 1 1.666 7a5.833 5.833 0 0 1 11.667 0Z"></path>
  </svg>
  {readingTime(toPlainText(content))} min. czytania
</p>

<style>
  .estimated-reading-time {
    color: var(--neutral-400, #c6cdcc);
    font-size: var(--typography-body-m, 0.875rem);
    display: grid;
    grid-template-columns: auto 1fr;
    align-items: center;
    gap: 0.5rem;
  }
</style>
