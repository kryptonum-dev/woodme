---
import BaseButton, { type Props as ButtonDataProps } from './Button.tsx';

type Props = ButtonDataProps;

const { sendingMessage, theme, shade, customIcon, ...props } = Astro.props;

const isPrimary = theme === 'primary';

const pathname = Astro.url.pathname;
---

<BaseButton {...props} shade={shade} theme={theme} pathname={pathname}>
  <span>
    {props.text || <slot />}
  </span>
  {!isPrimary && <span aria-hidden="true">{props.text || <slot />}</span>}
  {
    isPrimary &&
      (customIcon ? (
        <span>
          <Fragment set:html={customIcon} />
          <Fragment set:html={customIcon} />
        </span>
      ) : (
        <span>
          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="none">
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.25"
              d="M2.333 7h9.334m0 0-3.5-3.5m3.5 3.5-3.5 3.5"
            />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="none" aria-hidden="true">
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.25"
              d="M2.333 7h9.334m0 0-3.5-3.5m3.5 3.5-3.5 3.5"
            />
          </svg>
        </span>
      ))
  }
  <div>
    <span>{sendingMessage || 'Wysy≈Çanie'}</span>
    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="none"
      ><g clip-path="url(#a)"
        ><path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M7 1.167V3.5m0 7v2.333M3.5 7H1.167m11.666 0H10.5m.629 4.129-1.65-1.65m1.65-6.563-1.65 1.65M2.871 11.13l1.65-1.65M2.87 2.916l1.65 1.65"
        ></path></g
      ><defs><clipPath id="a"><path fill="#fff" d="M0 0h14v14H0z"></path></clipPath></defs></svg
    >
  </div>
</BaseButton>
