---
import type { ComponentProps } from 'astro/types';
import FullWidthPhoto, { FullWidthPhoto_Query } from '@/components/global/FullWidthPhoto.astro';
import CircleSwiper, { CircleSwiper_Query } from '@/components/global/CircleSwiper.astro';
import SplitContentSection, { SplitContentSection_Query } from './global/SplitContentSection.astro';
import BlogReference, { BlogReference_Query } from './global/BlogReference.astro';
import CtaSection, { CtaSection_Query } from './global/CtaSection.astro';
import ExpandingImages, { ExpandingImages_Query } from './global/ExpandingImages.astro';
import GalleryLinks, { GalleryLinks_Query } from './global/GalleryLinks.astro';
import TestimonialsSlider, { TestimonialsSlider_Query } from './global/TestimonialsSlider.astro';
import SingleTestimonialSection, { SingleTestimonialSection_Query } from './global/SingleTestimonialSection.astro';
import CenteredHeadingBackgroundImage, {
  CenteredHeadingBackgroundImage_Query,
} from './global/CenteredHeadingBackgroundImage.astro';

const components = {
  FullWidthPhoto,
  CircleSwiper,
  SplitContentSection,
  BlogReference,
  CtaSection,
  ExpandingImages,
  GalleryLinks,
  TestimonialsSlider,
  SingleTestimonialSection,
  CenteredHeadingBackgroundImage,
};

type ComponentsMap = {
  [Component in keyof typeof components]: {
    _type: Component;
  } & ComponentProps<(typeof components)[Component]>;
};

export type ComponentsProps = Array<ComponentsMap[keyof typeof components]>;

type Props = {
  data: ComponentsProps;
  indexStart?: number;
};

const { data, indexStart = 0 } = Astro.props;

export const Components_Query = /* groq */ `
  components[] {
    _type,
    sectionId,
    ${FullWidthPhoto_Query}
    ${CircleSwiper_Query}
    ${SplitContentSection_Query}
    ${BlogReference_Query}
    ${CtaSection_Query}
    ${ExpandingImages_Query}
    ${GalleryLinks_Query}
    ${TestimonialsSlider_Query}
    ${SingleTestimonialSection_Query}
    ${CenteredHeadingBackgroundImage_Query}
  },
`;
---

{
  data?.map((item, i) => {
    // NOTE: Using 'as any' is not ideal for type safety, but it's used here to simplify
    // the implementation and avoid creating separate typed interfaces for each component.
    const DynamicComponent = components[item._type] as any;
    if (!DynamicComponent) return null;
    return <DynamicComponent {...item} index={indexStart + i} />;
  })
}
