---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/src/components/ui/portable-text';

export const NumberedStepsList_Query = `
  _type == "NumberedStepsList" => {
    ${PortableTextQuery('paragraph')}
    type,
    listBullet[] {
      ${PortableTextQuery('heading')}
      itemList[]
    },
    listText[] {
      heading,
      paragraph
    }
  },
`;

type Props = {
  node: {
    paragraph: PortableTextValue;
    type: 'list' | 'text';
    listBullet: {
      heading: PortableTextValue;
      itemList: string[];
    }[];
    listText: {
      heading: PortableTextValue;
      paragraph?: PortableTextValue;
    }[];
  };
};

const {
  node: { paragraph, listBullet, listText, type },
} = Astro.props;
---

<section class="NumberedStepsList">
  <PortableText value={paragraph} class="title" />
  <ul class="list">
    {
      type === 'list'
        ? listBullet.map((item) => (
            <li class="item">
              <PortableText class="heading" value={item.heading} />
              <ul class="inner-list">
                {item.itemList.map((item) => (
                  <li class="inner-item">{item}</li>
                ))}
              </ul>
            </li>
          ))
        : listText.map((item) => (
            <li class="item">
              <div>
                <span>{item.heading}</span>
                {' - '}
                <span class="inner-text">{item.paragraph}</span>
              </div>
            </li>
          ))
    }
  </ul>
</section>

<style lang="scss">
  .NumberedStepsList {
    --col-gap: clamp(0.5rem, calc(1vw / 0.48), 1rem);
    margin: clamp(2rem, calc(2.5vw / 0.48), 2.5rem) 0;
    background-color: var(--neutral-200, #e9f2ed);
    padding: clamp(1.25rem, calc(2vw / 0.48), 2rem);
    color: var(--neutral-900);
    border-radius: 12px;

    .title {
      font-size: var(--typography-body-2xl);
    }
    .list {
      .item {
        line-height: 1.65;
        letter-spacing: -0.025em;
        display: grid;
        grid-template-columns: auto 1fr;
        column-gap: var(--col-gap);
        margin-top: clamp(1.5rem, calc(1.75vw / 0.48), 1.75rem);
        font-size: 1.25rem;
        counter-increment: section;

        &::before {
          content: counter(section);
          width: 2rem;
          height: 2rem;
          border-radius: 999px;
          background-color: var(--neutral-300, #d0e1d7);
          font-size: var(--typography-body-l, 1.125rem);
          display: grid;
          place-items: center;
          color: var(--neutral-800, #48514a);
        }

        .inner-list {
          grid-column: 1/3;
          // margin-left: calc(-1 * (1rem + var(--col-gap)));

          .inner-item {
            margin-top: clamp(1rem, calc(1.25vw / 0.48), 1.25rem);
            display: grid;
            grid-template-columns: auto 1fr;
            gap: clamp(0.5rem, calc(1vw / 0.48), 1rem);

            &::before {
              content: '';
              width: 0.25rem;
              height: 0.25rem;
              margin: 0.75rem 0.875rem 0;
              border-radius: 999px;
              background-color: var(--neutral-600, #87988b);
            }
          }
        }

        .inner-text {
          color: var(--neutral-800, #48514a);
        }
      }
    }

    @media (max-width: 30rem) {
      width: 100vw;
      margin-left: calc(-1 * var(--pageMargin));
      margin-right: calc(-1 * var(--pageMargin));
      border-radius: 8px;
      .title {
        font-size: 1.25rem;
      }
    }
  }
</style>
