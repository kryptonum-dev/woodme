---
import Image, { ImageDataQuery, type ImageDataProps } from '../ui/image';
import PortableText, { PortableTextQuery, type PortableTextValue } from '../ui/portable-text';
import { formatDate } from '../../utils/format-date';
import { renderStars } from '@/src/utils/render-stars';
import VideoThumbnail from '../ui/VideoThumbnail.astro';

export const TestimonialsSlider_Query = `
  _type == "TestimonialsSlider" => {
    ${PortableTextQuery('heading')}
    testimonials[]->{
      ${ImageDataQuery('image')}
      video {
        asset-> {
          playbackId,
          data,
          }
      },
      date,
      name,
      service,
      ${PortableTextQuery('review')}
    },
    "googleData": *[_type == "global"][0].googleData {
      rating,
      user_ratings_total,
      url,
    }
  },
`;

type Props = {
  index: number;
  sectionId?: string;
  heading: PortableTextValue;
  testimonials: {
    image: ImageDataProps;
    date: string;
    name: string;
    service: string;
    review: PortableTextValue;
    video: {
      asset: {
        playbackId: string;
        data: {
          aspect_ratio: string;
          tracks: {
            max_width: number;
          }[];
        };
      };
    };
  }[];
  googleData: {
    rating: number;
    user_ratings_total: number;
    url: string;
  };
};

const { index, sectionId, heading, testimonials, googleData } = Astro.props;

const countReviews = (number: number = 0) => {
  if (number >= 5) {
    return `${number} opinii`;
  } else if ([2, 3, 4].includes(number)) {
    return `${number} opinie`;
  } else if (number === 1) {
    return `${number} opinia`;
  } else {
    return 'Brak opinii';
  }
};
---

<section class="TestimonialsSlider max-width" id={sectionId}>
  <header class="header">
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
    <div class="controls">
      <button class="button button__prev" type="button" aria-label="Poprzednia opinia">
        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none">
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.5"
            d="M20.5 12.5h-16m0 0 6 6m-6-6 6-6"
          >
          </path>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none">
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.5"
            d="M20.5 12.5h-16m0 0 6 6m-6-6 6-6"
          >
          </path>
        </svg>
      </button>
      <button class="button button__next" type="button" aria-label="Następna opinia">
        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none">
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.5"
            d="M4.5 12.5h16m0 0-6-6m6 6-6 6"
          >
          </path>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none">
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.5"
            d="M4.5 12.5h16m0 0-6-6m6 6-6 6"
          >
          </path>
        </svg>
      </button>
    </div>
  </header>
  <div class="embla">
    <div class="embla__viewport">
      <ul class="embla__container">
        {
          testimonials?.map(({ image, date, name, service, review, video }, i) => (
            <li
              class="embla__slide"
              data-video={!!video}
              data-aspect-ratio={!!video ? video.asset.data.aspect_ratio : null}
              data-max-width={!!video ? video.asset.data.tracks[0].max_width.toString() : null}
              data-playback-id={!!video ? video.asset.playbackId : null}
            >
              {i === 0 && (
                <div class="rating">
                  <div class="stars">
                    <Fragment set:html={renderStars(googleData.rating)} />
                  </div>
                  <div class="rating__text">
                    <span>{googleData.rating.toFixed(1)}</span>
                    <span>{countReviews(googleData.user_ratings_total)}</span>
                  </div>
                </div>
              )}
              {!!video ? (
                <>
                  <VideoThumbnail
                    image={{ width: 274, height: 234, sizes: '274px' }}
                    playbackId={video.asset.playbackId}
                  />
                  <div class="info">
                    <p class="name">{name}</p>
                    <p class="service">{service}</p>
                  </div>
                </>
              ) : (
                <>
                  <Image {...image} sizes="44px" />
                  <p class="name">{name}</p>
                  <p class="service">{service}</p>
                  <PortableText value={review} class="review" />
                  <time class="date">{formatDate(new Date(date))}</time>
                </>
              )}
            </li>
          ))
        }
      </ul>
    </div>
    <button tabindex="-1" aria-label="Przewiń do następnej opinii" class="embla__track">
      <div class="line">
        <div class="indicator"></div>
      </div>
    </button>
  </div>
</section>

<style lang="scss">
  .TestimonialsSlider {
    padding: clamp(3rem, calc(5vw / 0.48), 5rem) 0;
    display: flex;
    align-items: center;
    gap: clamp(3.5rem, calc(5vw / 0.48), 5rem) 0.5rem;

    .header {
      text-align: center;
      max-width: 27.375rem;
      display: flex;
      flex-shrink: 0;
      flex-direction: column;
      align-items: center;

      .heading {
        margin-bottom: 3rem;
      }

      .controls {
        background-color: var(--neutral-100, #f2faf6);
        display: flex;
        align-items: center;
        gap: 0.25rem;
        border-radius: 999px;
        padding: 2px;

        .button {
          width: 2.75rem;
          height: 2.75rem;
          border-radius: 50%;
          display: grid;
          place-items: center;
          background-color: var(--neutral-200, #e9f2ed);
          position: relative;
          overflow: hidden;
          color: var(--neutral-700, #5f6d62);

          svg {
            transition: transform 800ms var(--easing);
          }

          &:focus-visible {
            outline: 2px solid var(--neutral-700, #5f6d62);
            outline-offset: 2px;
          }

          &:focus:not(:focus-visible) {
            color: var(--neutral-800, #3e463a);
          }

          & > svg:last-of-type {
            position: absolute;
            top: 50%;
            transition: transform 1000ms cubic-bezier(0.19, 1.46, 0.22, 1);
          }
          &__prev {
            & > svg:last-of-type {
              left: 50%;
              transform: translate(30px, -50%);
            }

            &:hover {
              > svg:first-of-type {
                transform: translateX(-40px);
              }

              > svg:last-of-type {
                transform: translate(-50%, -50%);
              }
            }
          }

          &__next {
            & > svg:last-of-type {
              right: 50%;
              transform: translate(-30px, -50%);
            }

            &:hover {
              > svg:first-of-type {
                transform: translateX(40px);
              }

              > svg:last-of-type {
                transform: translate(50%, -50%);
              }
            }
          }
        }
      }
    }

    .embla {
      position: relative;
      margin-top: -1.375rem;
      .rating {
        position: absolute;
        z-index: 10;
        top: 0;
        left: 50%;
        transform: translate(-50%, -1.375rem);

        padding: 0.5rem 0.5rem 0.375rem;
        border-radius: 4px;
        background-color: var(--neutral-100, #f2faf6);
        display: flex;
        flex-direction: column;
        gap: 0.375rem;
        align-items: stretch;
        .stars {
          display: flex;
          align-items: center;
          gap: 5px;
        }

        &__text {
          display: flex;
          align-items: center;
          justify-content: space-between;
          font-size: var(--typography-body-m, 0.875rem);
        }
      }

      &__viewport {
        margin-right: -4rem;
        padding-top: 1.375rem;
        margin-bottom: clamp(1rem, calc(1vw / 0.48), 1rem);
        overflow: hidden;

        @media (max-width: 37.5rem) {
          padding: 1rem 0;
        }
      }
      &__container {
        display: flex;
        touch-action: pan-y pinch-zoom;
        min-width: 75rem;
        align-items: stretch;
      }
      &__slide {
        transform: translate3d(0, 0, 0);
        flex: 0 0 clamp(18.625rem, calc(23.75vw / 0.48), 23.75rem);
        min-width: 0;
        min-height: 30.75rem;
        padding-left: 1rem;
        background-color: var(--neutral-300, #d0e1d7);
        padding: clamp(1.25rem, calc(2vw / 0.48), 2rem);
        display: flex;
        border-radius: 8px;
        flex-direction: column;
        align-items: flex-start;
        margin-left: 1.25rem;

        > img {
          width: 44px;
          height: 44px;
          border-radius: 50%;
          margin-bottom: clamp(1.25rem, calc(3vw / 0.48), 3rem);
        }

        .player {
          position: fixed;
          top: -50%;
          left: -50%;
          transform: translate(-50%, -50%);
          z-index: 1000;
        }

        .name {
          color: var(--neutral-900, #141915);
        }
        .service {
          margin-bottom: clamp(2.25rem, calc(3.5vw / 0.48), 3.5rem);
          font-size: var(--typography-body-m, 0.875rem);
        }

        .review {
          font-style: italic;
          letter-spacing: -0.025em;
        }

        .date {
          margin-top: auto;
          font-size: var(--typography-body-m, 0.875rem);
        }

        &:nth-child(3n + 2) {
          background-color: var(--secondary-400, #d2cdbf);
        }

        &:nth-child(3n) {
          background-color: var(--tertiary-400, #acc1cf);
        }
        &:nth-child(3n + 2),
        &:nth-child(3n) {
          .service,
          .review,
          .date {
            color: var(--neutral-900, #141915);
          }
        }

        &[data-video='true'] {
          padding: 0.75rem;
          flex: 0 0 18.625rem;

          .service {
            margin-bottom: 0;
          }

          .info {
            padding: 1.125rem 0.5rem 0.625rem;
          }
        }

        @media (max-width: 37.5rem) {
          min-height: auto;
          img {
            margin-bottom: 1.25rem;
          }

          .service {
            margin-bottom: 2rem;
          }

          .review {
            margin-bottom: 4rem;
          }
        }
      }

      &__track {
        min-height: 2.75rem;
        cursor: pointer;
        width: clamp(20rem, calc(22vw / 0.48), 33.75rem);
        display: flex;
        align-items: center;

        .line {
          height: 1px;
          background-color: var(--neutral-600, #87988b);
          position: relative;
          border-radius: 12px;
          width: 100%;
          transition: background-color 200ms;
          position: relative;
        }

        .indicator {
          height: 2px;
          background-color: var(--neutral-700, #5f6d62);
          position: absolute;
          left: 0%;
          top: -0.5px;
          width: 33%;
          transition: transform 1000ms var(--easing);
          border-radius: 12px;
        }

        &:hover {
          .line {
            background-color: var(--neutral-500, #a5b3a8);
          }
        }
      }
    }

    @media (max-width: 64rem) {
      flex-direction: column;

      .header {
        max-width: 38rem;
      }

      .embla {
        width: 100%;

        &__track {
          width: clamp(16rem, calc(33.75vw / 0.48), 33.75rem);
        }
      }
    }
  }
</style>

<script is:inline defer src="https://unpkg.com/embla-carousel/embla-carousel.umd.js"></script>
<script is:inline defer src="https://cdn.jsdelivr.net/npm/@mux/mux-player"></script>

<script type="module">
  import { openVideoPopup } from '/src/utils/open-video-popup';

  document.querySelectorAll('.TestimonialsSlider').forEach((section) => {
    const addTogglePrevNextBtnsActive = (emblaApi, prevBtn, nextBtn) => {
      const togglePrevNextBtnsState = () => {
        if (emblaApi.canScrollPrev()) prevBtn.removeAttribute('disabled');
        else prevBtn.setAttribute('disabled', 'disabled');

        if (emblaApi.canScrollNext()) nextBtn.removeAttribute('disabled');
        else nextBtn.setAttribute('disabled', 'disabled');
      };

      emblaApi
        .on('select', togglePrevNextBtnsState)
        .on('init', togglePrevNextBtnsState)
        .on('reInit', togglePrevNextBtnsState);

      return () => {
        prevBtn.removeAttribute('disabled');
        nextBtn.removeAttribute('disabled');
      };
    };

    const addPrevNextBtnsClickHandlers = (emblaApi, prevBtn, nextBtn) => {
      const scrollPrev = () => {
        emblaApi.scrollPrev();
      };
      const scrollNext = () => {
        emblaApi.scrollNext();
      };
      prevBtn.addEventListener('click', scrollPrev, false);
      nextBtn.addEventListener('click', scrollNext, false);

      const removeTogglePrevNextBtnsActive = addTogglePrevNextBtnsActive(emblaApi, prevBtn, nextBtn);

      return () => {
        removeTogglePrevNextBtnsActive();
        prevBtn.removeEventListener('click', scrollPrev, false);
        nextBtn.removeEventListener('click', scrollNext, false);
      };
    };

    const OPTIONS = { loop: true, align: 'start', skipSnaps: false };

    const emblaNode = section.querySelector('.embla');
    const viewportNode = emblaNode.querySelector('.embla__viewport');
    const prevBtnNode = section.querySelector('.button__prev');
    const nextBtnNode = section.querySelector('.button__next');

    const setupIndicator = (emblaApi) => {
      const indicator = emblaNode.querySelector('.indicator');
      const track = emblaNode.querySelector('.embla__track');

      const updateIndicator = () => {
        const currentIndex = emblaApi.selectedScrollSnap();
        const slideCount = emblaApi.scrollSnapList().length;
        const slideWidth = 100 / slideCount;

        indicator.style.transform = `translateX(${currentIndex * 100}%)`;
        indicator.style.width = `${slideWidth}%`;
      };

      const handleTrackClick = () => {
        const rect = track.getBoundingClientRect();
        const clickPosition = e.clientX - rect.left;
        const trackWidth = rect.width;

        const slideCount = emblaApi.scrollSnapList().length;
        const clickPercentage = clickPosition / trackWidth;
        const slideIndex = Math.floor(clickPercentage * slideCount);

        emblaApi.scrollTo(slideIndex);
      };

      track.addEventListener('click', handleTrackClick);

      emblaApi.on('select', updateIndicator).on('reInit', updateIndicator).on('init', updateIndicator);

      return () => {
        track.removeEventListener('click', handleTrackClick);
      };
    };

    const emblaApi = EmblaCarousel(viewportNode, OPTIONS);
    const cleanup = setupIndicator(emblaApi);
    const cleanupPrevNextBtns = addPrevNextBtnsClickHandlers(emblaApi, prevBtnNode, nextBtnNode);

    emblaApi.on('destroy', cleanup);
    emblaApi.on('destroy', cleanupPrevNextBtns);

    // ------------------------- Mux Video Setup -------------------------------

    function setupVideoPopup() {
      const slides = section.querySelectorAll('.embla__slide[data-video="true"]');

      slides.forEach((slide) => {
        const showVideoBtn = slide.querySelector('.showVideo');
        const name = slide.querySelector('.name')?.textContent;
        const playbackId = slide.getAttribute('data-playback-id');

        const aspectRatio =
          slide.getAttribute('data-aspect-ratio')?.split(':')[0] +
          '/' +
          slide.getAttribute('data-aspect-ratio')?.split(':')[1];
        const maxWidth = Number(slide.getAttribute('data-max-width'));

        openVideoPopup(showVideoBtn, playbackId, name, aspectRatio, maxWidth);
      });
    }

    setupVideoPopup();
  });
</script>
