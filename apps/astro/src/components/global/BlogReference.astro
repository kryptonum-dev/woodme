---
import PortableText, { PortableTextQuery, type PortableTextValue } from '../ui/portable-text';
import { ButtonDataQuery, type ButtonDataProps } from '../ui/button';
import Button from '../ui/button/Button.astro';
import BlogCard, { BlogCard_Query, type Props as BlogCardProps } from '../ui/BlogCard/BlogCard.astro';

export const BlogReference_Query = `
  _type == "BlogReference" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    ${ButtonDataQuery('cta')}
    highlightedBlogPosts[]->{
      ${BlogCard_Query}
    },
  },
`;

type Props = {
  index: number;
  sectionId?: string;
  heading: PortableTextValue;
  paragraph: PortableTextValue;
  cta: ButtonDataProps;
  highlightedBlogPosts: BlogCardProps[];
};

const { index, heading, paragraph, highlightedBlogPosts, cta, sectionId } = Astro.props;
---

<section class="BlogReference" id={sectionId}>
  <div class="container max-width">
    <header>
      <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
      <PortableText class="paragraph" value={paragraph} />
      <Button shade="dark" {...cta} />
    </header>
    <nav>
      {
        highlightedBlogPosts.map(({ image, name, slug, content }, i) => (
          <BlogCard
            image={image}
            name={name}
            slug={slug}
            content={content}
            imgProps={{
              sizes: '(max-width: 480px) 95vw, 480px',
              loading: index === 0 ? 'eager' : 'lazy',
              priority: index === 0 && i === 0,
            }}
          />
        ))
      }
    </nav>
  </div>
</section>

<style lang="scss">
  .BlogReference {
    background-color: var(--secondary-400, #d2cdbf);
    padding: clamp(4rem, calc(4vw / 0.48), 6.5rem) 0;
    position: relative;

    .container {
      display: flex;
      justify-content: space-between;
      align-items: stretch;
      gap: 4px;

      header {
        padding: 1.5rem;
        max-width: clamp(16rem, calc(18vw / 0.48), 28rem);
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        .heading {
          margin-bottom: 4.5rem;
          color: var(--secondary-900, #403d33);
          strong {
            color: var(--neutral-900, #141915);
          }
        }

        .paragraph {
          margin-bottom: auto;
          color: var(--neutral-900, #141915);
        }

        > a {
          margin-top: 2rem;
        }
      }

      nav {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;

        @media (max-width: 56.25rem) {
          grid-template-columns: 1fr;
        }
      }

      @media (max-width: 67.5rem) {
        flex-direction: column;

        header {
          max-width: 38rem;
          margin: 0 auto 4rem;

          .heading {
            margin-bottom: 2rem;
          }
        }
      }
    }
  }
</style>

<script>
  document.querySelectorAll<HTMLDivElement>('.BlogReference').forEach((section) => {
    const blogPosts = section.querySelectorAll('.blogPost') as NodeListOf<HTMLAnchorElement>;

    blogPosts.forEach((blogPost) => {
      const readMore = blogPost.querySelector('.readMore') as HTMLElement;
      let firstMove = false;
      let animationFrameId: number;

      const updatePosition = (e: MouseEvent) => {
        const rect = blogPost.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const offsetX = readMore.offsetWidth / 2;
        const offsetY = readMore.offsetHeight / 2;

        readMore.style.transform = `translate(${x - offsetX}px, ${y - offsetY}px)`;
        readMore.style.transition = firstMove
          ? 'transform 300ms cubic-bezier(0.19, 1, 0.22, 1), opacity 100ms ease-out'
          : 'opacity 100ms ease-out';
        firstMove = true;
      };

      blogPost.addEventListener('mouseenter', () => {
        readMore.style.opacity = '1';
        firstMove = false;
      });

      blogPost.addEventListener('mouseleave', () => {
        readMore.style.opacity = '0';
        cancelAnimationFrame(animationFrameId);
      });

      blogPost.addEventListener('mousemove', (e) => {
        cancelAnimationFrame(animationFrameId);
        animationFrameId = requestAnimationFrame(() => updatePosition(e));
      });
    });
  });
</script>
