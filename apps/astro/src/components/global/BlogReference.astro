---
import Image, { ImageDataQuery, type ImageDataProps } from '../ui/image';
import PortableText, { PortableTextQuery, type PortableTextValue } from '../ui/portable-text';
import { ButtonDataQuery, type ButtonDataProps } from '../ui/button';
import Button from '../ui/button/Button.astro';

export const BlogReference_Query = `
  _type == "BlogReference" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    ${ButtonDataQuery('cta')}
    highlightedBlogPosts[]->{
      ${ImageDataQuery('image')}
      name,
      slug,
    },
  },
`;

type Props = {
  index: number;
  sectionId?: string;
  heading: PortableTextValue;
  paragraph: PortableTextValue;
  cta: ButtonDataProps;
  highlightedBlogPosts: { image: ImageDataProps; name: string; slug: { current: string } }[];
};

const { index, heading, paragraph, highlightedBlogPosts, cta, sectionId } = Astro.props;
---

<section class="BlogReference" id={sectionId}>
  <div class="container max-width">
    <header>
      <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
      <PortableText class="paragraph" value={paragraph} />
      <Button shade="dark" {...cta} />
    </header>
    <nav>
      {
        highlightedBlogPosts.map(({ image, name, slug }, i) => (
          <a href={slug.current} class="blogPost">
            <div class="container">
              <Image
                {...image}
                loading={index === 0 ? 'eager' : 'lazy'}
                fetchpriority={index === 0 && i === 0 ? 'high' : 'auto'}
                sizes="(max-width: 480px) 95vw, 480px"
              />
              <div class="content">
                {index === 0 ? <h2>{name}</h2> : <h3>{name}</h3>}
                {/* TODO Add custom reading time component after completing blog post view */}
                <div class="reading">
                  <svg xmlns="http://www.w3.org/2000/svg" width="15" height="14" fill="none">
                    <path
                      stroke="#9E9781"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="1.25"
                      d="M7.5 3.5V7l2.333 1.167M13.333 7A5.833 5.833 0 1 1 1.666 7a5.833 5.833 0 0 1 11.667 0Z"
                    />
                  </svg>
                  <span>3 minuty czytania</span>
                </div>
              </div>
              <div class="readMore">
                Przeczytaj
                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="none">
                  <path
                    stroke="#5F6D62"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="1.25"
                    d="M2 6h8m0 0L7 3m3 3L7 9"
                  />
                </svg>
              </div>
            </div>
          </a>
        ))
      }
    </nav>
  </div>
</section>

<style lang="scss">
  .BlogReference {
    background-color: var(--secondary-400, #d2cdbf);
    padding: clamp(4rem, calc(4vw / 0.48), 6.5rem) 0;
    position: relative;

    .container {
      display: flex;
      justify-content: space-between;
      align-items: stretch;
      gap: 4px;

      header {
        padding: 1.5rem;
        max-width: clamp(16rem, calc(18vw / 0.48), 28rem);
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        .heading {
          margin-bottom: 4.5rem;
          color: var(--secondary-900, #403d33);
          strong {
            color: var(--neutral-900, #141915);
          }
        }

        .paragraph {
          margin-bottom: auto;
          color: var(--neutral-900, #141915);
        }

        > a {
          margin-top: 2rem;
        }
      }

      nav {
        display: flex;
        justify-content: center;
        flex-grow: 1;
        gap: 0.5rem;
        align-self: center;
        a {
          cursor: none;
          padding: 0.5rem;
          border-radius: 12px;
          background-color: var(--secondary-300, #e3dfd3);
          max-width: 437px;
          transition: background-color 400ms;
          position: relative;
          overflow: hidden;
          .container {
            display: flex;
            flex-direction: column;
            background-color: var(--secondary-400, #d2cdbf);
            border-radius: 6px;
            overflow: hidden;
            height: 100%;
            position: relative;
            gap: 0;
            transition:
              transform 800ms var(--easing),
              border-radius 800ms var(--easing);
            img {
              width: 100%;
            }
            .content {
              padding: 1.25rem 1rem;
              text-align: center;
              height: 100%;

              h2,
              h3 {
                font-size: var(--typography-body-l, 1.125rem);
                font-family: 'Inter', 'Inter Fallback', sans-serif;
                color: var(--neutral-900, #141915);
                font-weight: 400;
                margin-bottom: 2.5rem;
                transition: transform 800ms var(--easing);
              }
              .reading {
                display: flex;
                flex-direction: column;
                align-items: center;
                font-size: var(--typography-body-m, 0.875rem);
                transition: transform 800ms var(--easing);
                svg {
                  margin-bottom: 0.375rem;
                }
              }
            }
          }
          &:focus:not(:focus-visible) {
            background-color: transparent;

            .container {
              transform: scale(1.02);
              border-radius: 4px;

              h2,
              h3,
              .reading {
                transform: translateY(-0.25rem);
              }
            }
          }

          &:focus-visible {
            outline: 3px solid var(--neutral-800, #48514a);
            outline-offset: -3px;
          }
        }

        @media (max-width: 56.25rem) {
          flex-direction: column;
        }
      }
      .readMore {
        position: absolute;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        top: 0;
        left: 0;
        background-color: var(--neutral-200, #e9f2ed);
        padding: 0.375rem 0.625rem;
        pointer-events: none;
        border-radius: 999px;
        font-size: var(--typography-body-m, 0.875rem);
        opacity: 0;
        transition: opacity 200ms;

        @media not all and (pointer: fine) {
          display: none;
        }
      }
      @media (max-width: 64rem) {
        flex-direction: column;

        header {
          max-width: 38rem;
          margin: 0 auto 4rem;

          .heading {
            margin-bottom: 2rem;
          }
        }
      }
    }
  }
</style>

<script>
  document.querySelectorAll<HTMLDivElement>('.BlogReference').forEach((section) => {
    const blogPosts = section.querySelectorAll('.blogPost') as NodeListOf<HTMLAnchorElement>;

    blogPosts.forEach((blogPost) => {
      const readMore = blogPost.querySelector('.readMore') as HTMLElement;
      let firstMove = false;
      let animationFrameId: number;

      const updatePosition = (e: MouseEvent) => {
        const rect = blogPost.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const offsetX = readMore.offsetWidth / 2;
        const offsetY = readMore.offsetHeight / 2;

        readMore.style.transform = `translate(${x - offsetX}px, ${y - offsetY}px)`;
        readMore.style.transition = firstMove
          ? 'transform 300ms cubic-bezier(0.19, 1, 0.22, 1), opacity 100ms ease-out'
          : 'opacity 100ms ease-out';
        firstMove = true;
      };

      blogPost.addEventListener('mouseenter', () => {
        readMore.style.opacity = '1';
        firstMove = false;
      });

      blogPost.addEventListener('mouseleave', () => {
        readMore.style.opacity = '0';
        cancelAnimationFrame(animationFrameId);
      });

      blogPost.addEventListener('mousemove', (e) => {
        cancelAnimationFrame(animationFrameId);
        animationFrameId = requestAnimationFrame(() => updatePosition(e));
      });
    });
  });
</script>
