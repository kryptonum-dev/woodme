---
import { Image as AstroImage } from 'astro:assets';
import Image, { ImageDataQuery, type ImageDataProps } from '../ui/image';
import PortableText, { PortableTextQuery, type PortableTextValue } from '../ui/portable-text';
import background from '@/assets/texture.webp';
import { ButtonDataQuery, type ButtonDataProps } from '../ui/button';
import Button from '../ui/button/Button.astro';
import { DOMAIN } from '@/src/global/constants';

export const CircleSwiper_Query = `
  swiper[]{
    ${ImageDataQuery('img')}
    title,
  },
  _type == "CircleSwiper" => {
  ${PortableTextQuery('heading')}
  ${PortableTextQuery('paragraph')}
  ${ButtonDataQuery('cta')}
  additionalParagraph,
  downloadPdf {
    pdf{
      asset->{
        url,
        assetId
      }
    },
    downloadText
  },
  },
`;

type Props = {
  index: number;
  sectionId?: string;
  swiper: { img: ImageDataProps; title: string }[];
  heading: PortableTextValue;
  paragraph: PortableTextValue;
  cta: ButtonDataProps;
  additionalParagraph: string;
  downloadPdf: {
    pdf: {
      asset: {
        url: string;
        assetId: string;
      };
    };
    downloadText: string;
  };
};

const { index, sectionId, heading, paragraph, swiper, cta, additionalParagraph, downloadPdf } = Astro.props;

console.log(downloadPdf.pdf.asset.assetId);
---

<section class="CircleSwiper max-width" id={sectionId}>
  <header><PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" /></header>
  <div class="container">
    <div class="cities">
      <AstroImage src={background} alt="" loading={index === 0 ? 'eager' : 'lazy'} />
      <div class="track">
        <div class="indicator" style={`width: ${100 / swiper.length}%`}></div>
      </div>
      <div class="swiper">
        <div class="wrapper">
          {
            swiper.map(({ img, title }, i: number) => (
              <Image
                {...img}
                sizes="(max-width: 38.75rem) 92vw, (max-width: 43.75rem) 82vw, (max-width: 64rem) 504px, 480px"
                loading={index === 0 ? 'eager' : 'lazy'}
                fetchpriority={i === 0 && index === 0 ? 'high' : 'low'}
                class="slide"
                draggable={false}
                data-title={title}
              />
            ))
          }
        </div>
      </div>
      <div class="nav">
        <button class="arrow arrow_left" disabled aria-label="Poprzednie miasto"
          ><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"
            ><path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M20 12H4m0 0 6 6m-6-6 6-6"></path></svg
          >
        </button>
        <div class="names">
          {
            swiper.map(({ title }, i) => (
              <span class="name" hidden={i !== 0}>
                {title}
              </span>
            ))
          }
        </div>
        <button class="arrow_right arrow" aria-label="NastÄ™pne miasto"
          ><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"
            ><path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M4 12h16m0 0-6-6m6 6-6 6"></path></svg
          ></button
        >
      </div>
    </div>
    <div class="content">
      <PortableText class="paragraph" value={paragraph} />
      <Button shade="dark" {...cta} />
      <div class="additionals">
        {additionalParagraph && <div class="additionalText">{additionalParagraph}</div>}
        {
          downloadPdf?.pdf?.asset?.url && (
            <a
              href={`${DOMAIN}/api/static/${downloadPdf.pdf.asset.assetId}`}
              class="download"
              target="_blank"
              rel="noreferrer"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                <path
                  stroke="#87988B"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.25"
                  d="M9.333 1.514v2.753c0 .374 0 .56.073.703a.667.667 0 0 0 .291.291c.143.073.33.073.703.073h2.753m-3.82 6h-4m5.333-2.667H5.333m8-2.008v4.808c0 1.12 0 1.68-.218 2.108a2 2 0 0 1-.874.874c-.428.218-.988.218-2.108.218H5.867c-1.12 0-1.68 0-2.108-.218a2 2 0 0 1-.875-.874c-.217-.427-.217-.988-.217-2.108V4.534c0-1.12 0-1.68.217-2.108a2 2 0 0 1 .875-.874c.427-.218.987-.218 2.108-.218h2.14c.49 0 .734 0 .965.055a2 2 0 0 1 .578.24c.202.123.375.296.72.642l2.126 2.126c.346.346.519.519.643.72.11.18.19.374.239.579.055.23.055.474.055.963Z"
                />
              </svg>
              <span>{downloadPdf?.downloadText}</span>
            </a>
          )
        }
      </div>
    </div>
  </div>
</section>

<style lang="scss">
  .CircleSwiper {
    max-width: 69.125rem;
    margin: 0 auto;
    padding: clamp(4rem, calc(5vw / 0.48), 5rem) 0;
    header {
      max-width: 27.375rem;
      margin-bottom: clamp(1.25rem, calc(2.5vw / 0.48), 2.5rem);
    }

    .container {
      display: flex;
      align-items: stretch;
      .cities {
        width: 33rem;
        min-height: 33rem;
        flex-shrink: 0;
        border-radius: 12px;
        background-color: var(--tertiary-400, #acc1cf);
        position: relative;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        > img {
          position: absolute;
          inset: 0;
          object-fit: cover;
          height: 100%;
          width: 100%;
          object-fit: cover;
        }

        .track {
          max-width: calc(100% - 3rem);
          height: 1px;
          background-color: var(--neutral-200, #e9f2ed);
          margin: 1.375rem 0 0.875rem;
          width: 100%;
          z-index: 1;

          position: relative;
          border-radius: 12px;

          .indicator {
            background-color: var(--neutral-700, #5f6d62);
            height: 200%;
            position: absolute;
            top: -0.5px;
            left: 0;

            transition: transform 0.8s var(--easing);
            border-radius: 12px;
          }
        }

        .swiper {
          width: calc(100% - 3rem);
          max-width: 31.5rem;
          aspect-ratio: 1/1;
          position: relative;
          overflow: hidden;
          border-radius: 50%;

          .wrapper {
            display: flex;
            position: absolute;
            top: 0;
            left: 0;
            align-items: center;
            width: 100%;
            transition: transform 800ms cubic-bezier(0.19, 1, 0.22, 1);
          }
        }

        .nav {
          padding: 0 0.75rem 1.25rem;
          display: grid;
          grid-template-columns: auto 1fr auto;
          align-items: center;
          justify-content: space-between;
          width: 100%;
          z-index: 3;
          margin-top: -1.5rem;
          .names {
            justify-self: center;
            width: 1rem;
            position: relative;
            height: 100%;
            .name {
              padding: 0.25rem 0.625rem;
              background-color: var(--neutral-200, #e9f2ed);
              border-radius: 4px;
              text-align: center;
              position: absolute;
              top: 50%;
              left: 50%;
              width: fit-content;
              transform: translate(-50%, -50%);
              transition: filter 550ms cubic-bezier(0.215, 0.61, 0.355, 1);
              will-change: filter;

              &[hidden] {
                display: block;
                filter: blur(8px);
                visibility: hidden;
              }
            }
          }

          .arrow {
            width: 2.75rem;
            aspect-ratio: 1/1;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: #5f6d62;
            transition: color 0.25s;
            svg {
              transition: transform 700ms var(--easing);
            }

            &_left {
              &:hover:not(:disabled) {
                svg {
                  transform: translateX(-2px);
                }
              }
            }

            &_right {
              &:hover:not(:disabled) {
                svg {
                  transform: translateX(2px);
                }
              }
            }

            &:hover:not(:disabled) {
              color: #4c574e;
            }

            &:disabled {
              opacity: 0.7;
              cursor: auto;
            }
          }

          @media (max-width: calc(37.5rem)) {
            margin-top: 2rem;
          }
        }
      }

      .content {
        border-radius: 12px;
        padding: clamp(1rem, calc(3vw / 0.48), 3rem);
        background-color: var(--neutral-100, #f2faf6);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: start;

        .paragraph {
          margin-bottom: clamp(2rem, calc(3vw / 0.48), 3rem);
          font-size: var(--typography-body-l, 1rem);
          > p:not(:last-child) {
            margin-bottom: 1rem;
          }
        }
        .additionals {
          display: flex;
          flex-wrap: wrap;
          margin-top: auto;
          align-items: center;
          gap: 1rem 1.5rem;
          width: 100%;
        }

        > a {
          margin-bottom: clamp(2.5rem, calc(6vw / 0.48), 6rem);
        }

        .additionalText {
          font-size: var(--typography-body-m, 0.875rem);
          display: grid;
          flex-shrink: 1;
          grid-template-columns: 4px auto;
          min-width: 11.5rem;
          max-width: 15rem;
          gap: 0.5rem;

          &::before {
            content: '';
            width: 4px;
            height: 4px;
            border-radius: 50%;
            margin-top: 9px;
            background-color: #aebaa7;
          }
        }
        .download {
          flex-shrink: 0;
          font-size: var(--typography-body-s, 0.75rem);
          display: flex;
          align-items: center;
          gap: 0.375rem;
          border-radius: 4px;
          background-color: var(--neutral-200, #e9f2ed);
          color: #4f4a40;
          transition: background-color 250ms ease-out;
          padding: 0.625rem;

          &:hover {
            background-color: var(--neutral-300, #d0e1d7);
          }
        }
      }
    }

    @media (max-width: 64rem) {
      max-width: 38rem;
      .container {
        flex-direction: column;
        width: 100%;

        .cities {
          width: 100%;
          min-height: 0;

          .nav {
            max-width: 30rem;
          }
        }
        .content {
          .additionalText {
            max-width: 17rem;
          }
        }
      }
    }
  }
</style>

<script>
  document.querySelectorAll<HTMLDivElement>('.CircleSwiper').forEach((swiper) => {
    const wrapper = swiper.querySelector('.wrapper')! as HTMLElement;
    const slides = swiper.querySelectorAll('.slide') as NodeListOf<HTMLImageElement>;
    const slidesLength = slides.length;
    const arrowLeft = swiper.querySelector('.arrow_left')! as HTMLButtonElement;
    const arrowRight = swiper.querySelector('.arrow_right')! as HTMLButtonElement;
    const cities = swiper.querySelectorAll('.name') as NodeListOf<HTMLSpanElement>;
    const indicator = swiper.querySelector('.indicator')! as HTMLElement;

    let currentIndex = 0;
    let startX = 0;
    let currentTranslate = 0;
    let prevTranslate = 0;
    let isDragging = false;

    const checkIsPointerCoarse = () => window.matchMedia('(pointer: coarse)').matches;

    const updateSwipe = () => {
      cities.forEach((city, i) => {
        city.hidden = i !== currentIndex;
      });
      arrowLeft.disabled = currentIndex === 0;
      arrowRight.disabled = currentIndex === slidesLength - 1;
      indicator.style.transform = `translateX( ${currentIndex * 100}%)`;
    };

    const handleSwipeStart = (event: PointerEvent | TouchEvent) => {
      isDragging = true;
      startX = 'touches' in event ? event.touches[0].clientX : event.clientX;
      prevTranslate = 0;
      wrapper.style.transition = 'none';
    };

    const handleSwipeMove = (event: PointerEvent | TouchEvent) => {
      if (!isDragging) return;
      const currentX = 'touches' in event ? event.touches[0].clientX : event.clientX;
      const diffX = currentX - startX;
      if ((currentIndex === 0 && diffX > 0) || (currentIndex === slidesLength - 1 && diffX < 0)) return;
      currentTranslate = prevTranslate + diffX;
      wrapper.style.transform = `translateX(calc(${currentIndex * -100}% + ${currentTranslate}px))`;
    };

    const handleSwipeEnd = () => {
      if (!isDragging) return;
      isDragging = false;
      const slideWidth = slides[0].clientWidth;
      const movedBy = currentTranslate - prevTranslate;

      if (movedBy < -slideWidth / 3 && currentIndex < slidesLength - 1) {
        currentIndex++;
      } else if (movedBy > slideWidth / 3 && currentIndex > 0) {
        currentIndex--;
      }

      wrapper.style.transition = 'transform 800ms cubic-bezier(0.19, 1, 0.22, 1)';
      wrapper.style.transform = `translateX(${currentIndex * -100}%)`;
      currentTranslate = 0;
      updateSwipe();
    };

    // Events on arrow buttons

    arrowLeft.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
        wrapper.style.transform = `translateX(${currentIndex * -100}%)`;
        updateSwipe();
      }
    });

    arrowRight.addEventListener('click', () => {
      if (currentIndex < slidesLength - 1) {
        currentIndex++;
        wrapper.style.transform = `translateX(${currentIndex * -100}%)`;
        updateSwipe();
      }
    });

    // Events on mouse

    wrapper.addEventListener('pointerdown', (event) => {
      if (!checkIsPointerCoarse()) handleSwipeStart(event);
    });
    wrapper.addEventListener('pointermove', (event) => {
      if (!checkIsPointerCoarse()) handleSwipeMove(event as PointerEvent);
    });
    wrapper.addEventListener('pointerup', () => {
      if (!checkIsPointerCoarse()) handleSwipeEnd();
    });
    wrapper.addEventListener('pointercancel', () => {
      if (!checkIsPointerCoarse()) handleSwipeEnd();
    });
    wrapper.addEventListener('pointerleave', () => {
      if (!checkIsPointerCoarse()) handleSwipeEnd();
    });

    // Events on touch

    wrapper.addEventListener('touchstart', handleSwipeStart);
    wrapper.addEventListener('touchmove', handleSwipeMove as EventListener);
    wrapper.addEventListener('touchend', handleSwipeEnd);
    wrapper.addEventListener('touchcancel', handleSwipeEnd);
  });
</script>
