---
import { ButtonDataQuery, type ButtonDataProps } from '../ui/button';
import Button from '../ui/button/Button.astro';
import Image, { ImageDataQuery, type ImageDataProps } from '../ui/image';
import imageToInlineSvg from '../ui/image/image-to-inline-svg';
import PortableText, { PortableTextQuery, type PortableTextValue } from '../ui/portable-text';

export const TwoColumnsImageListCta_Query = `
  _type == "TwoColumnsImageListCta" => {
    ${ImageDataQuery('image')}
    ${PortableTextQuery('heading')}
    pointsList[]{
        "icon": icon.asset -> url,
        text,
    },
    ctaBox{
        ${PortableTextQuery('heading')}
        ${PortableTextQuery('paragraph')}
        ${ButtonDataQuery('cta')}
    },
  },
`;

type Props = {
  index: number;
  sectionId?: string;
  image: ImageDataProps;
  heading: PortableTextValue;
  pointsList: {
    icon: string;
    text: string;
  }[];
  ctaBox: {
    heading: PortableTextValue;
    paragraph: PortableTextValue;
    cta: ButtonDataProps;
  };
};

const { index, sectionId, image, heading, pointsList, ctaBox } = Astro.props;

function renderHeading(heading: any) {
  const newBlock = heading.map((block: any) => {
    if (block.children) {
      block.children = block.children.map((child: any) => {
        return child.text;
      });
    }
    return block;
  });

  const blockArray = newBlock
    .map((block: any) => block.children)
    .flat()
    .filter((child: any) => child !== '')
    .join(' ')
    .split(' ');

  return blockArray.reduce((acc: any, current: any, index: number) => {
    acc.push(current);
    if (index < blockArray.length - 1) {
      acc.push(' ');
    }
    return acc;
  }, []);
}

const Heading = index === 0 ? 'h1' : 'h2';

const svgContents = await Promise.all(pointsList.map(async ({ icon }) => imageToInlineSvg(icon)));
---

<section class="TwoColumnsImageListCta" id={sectionId}>
  <div class="container max-width">
    <div class="box">
      <header class="header">
        <Heading class="heading">
          {
            renderHeading(heading).map((word: string) =>
              word === 'WOODME' ? (
                <>
                  <svg
                    style="display: inline-block;"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 200 28"
                    fill="none"
                  >
                    <path
                      fill="#5F6D62"
                      d="m37.583 9.407-3.399-3.778-3.758-3.003c-1-1-2.355-1.562-3.766-1.562H12.143a5.332 5.332 0 0 0-3.767 1.562L4.618 5.629l-3.4 3.778c-1 .998-1.226 2.355-1.226 3.767v13.003c0 .206.168.374.374.374H4.26a.374.374 0 0 0 .374-.374V7.922c0-.977.629-1.893 1.662-2.195.2-.059.41-.08.62-.08H19.22l-3.384 3.76c-1 1-1.227 2.355-1.227 3.767v13.003c0 .206.167.374.374.374h3.893a.374.374 0 0 0 .374-.374V7.922c0-.977.628-1.893 1.662-2.195.2-.059.41-.08.62-.08h10.356c.208 0 .42.021.62.08a2.282 2.282 0 0 1 1.661 2.195v18.257c0 .207.168.374.374.374h3.893a.374.374 0 0 0 .374-.374V13.176c0-1.412-.226-2.769-1.227-3.767v-.002Z"
                    />

                    <path
                      fill="#141915"
                      d="M59.952 25.915h-4.795a.435.435 0 0 1-.42-.32L48.829 4.137a.435.435 0 0 1 .42-.55h3.202c.2 0 .374.137.421.333l2.464 10.112c.623 2.87 1.247 5.618 1.79 8.482.02.103.109.177.213.177h.784a.217.217 0 0 0 .213-.179c.541-2.943 1.084-5.61 1.79-8.48l2.67-10.121a.434.434 0 0 1 .42-.324h4.206c.197 0 .371.135.421.326l2.63 10.16c.664 2.747 1.248 5.533 1.79 8.44.019.101.108.178.212.178h.702a.217.217 0 0 0 .213-.177c.543-2.825 1.166-5.572 1.79-8.485l2.422-10.11a.434.434 0 0 1 .422-.332h2.99c.286 0 .495.272.418.548l-5.826 21.46a.437.437 0 0 1-.42.321h-4.964a.432.432 0 0 1-.421-.333l-2.168-9.007c-.665-2.749-1.536-6.56-2.088-9.629a.215.215 0 0 0-.213-.176h-.446a.215.215 0 0 0-.212.174c-.596 3.071-1.506 6.882-2.17 9.631l-2.128 9.005a.435.435 0 0 1-.423.335ZM80.902 14.708c0-7.004 4.326-11.589 11.66-11.589 7.335 0 11.663 4.585 11.663 11.589 0 7.004-4.157 11.676-11.663 11.676s-11.66-4.714-11.66-11.676Zm19.549-.041c0-4.925-2.503-8.279-7.886-8.279-5.384 0-7.887 3.354-7.887 8.279 0 4.924 2.46 8.447 7.886 8.447 5.428 0 7.887-3.353 7.887-8.447ZM105.711 14.708c0-7.004 4.325-11.589 11.66-11.589 7.334 0 11.662 4.585 11.662 11.589 0 7.004-4.156 11.676-11.662 11.676-7.506 0-11.66-4.714-11.66-11.676Zm19.548-.041c0-4.925-2.502-8.279-7.886-8.279-5.383 0-7.886 3.354-7.886 8.279 0 4.924 2.459 8.447 7.886 8.447s7.886-3.353 7.886-8.447ZM131.238 4.021c0-.24.196-.435.435-.435h8.809c8.015 0 11.789 3.906 11.789 10.995 0 7.088-4.452 11.334-11.747 11.334h-8.851a.436.436 0 0 1-.435-.435V4.02Zm3.815 2.923v15.613c0 .12.098.217.218.217h4.999c5.894 0 8.225-3.014 8.225-8.193 0-5.477-2.544-7.854-8.482-7.854h-4.745a.218.218 0 0 0-.217.217h.002ZM157.13 25.917h-2.692a.436.436 0 0 1-.434-.435V4.023c0-.24.195-.435.434-.435h5.59c.178 0 .337.109.402.272l3.961 9.831c.582 1.455 1.571 4.42 2.329 6.895a.214.214 0 0 0 .206.152h.613c.095 0 .18-.06.206-.152.754-2.47 1.664-5.36 2.329-7.023l4.002-9.707a.435.435 0 0 1 .402-.27h5.253c.239 0 .435.196.435.435v21.46c0 .238-.196.434-.435.434h-2.905a.436.436 0 0 1-.434-.435V15.131c0-2.514.08-5.75.163-8.267a.215.215 0 0 0-.217-.222h-.463a.216.216 0 0 0-.207.152c-.845 2.73-2.009 6.016-3.132 8.977l-3.62 8.565a.434.434 0 0 1-.4.265h-3.237a.436.436 0 0 1-.402-.27l-3.578-8.689a149.843 149.843 0 0 1-2.965-8.848.215.215 0 0 0-.207-.152h-.339a.216.216 0 0 0-.217.22c.037 2.553-.004 5.713-.004 8.271v10.35c0 .239-.196.434-.435.434h-.002ZM182.894 3.586h15.625c.239 0 .434.196.434.435v2.356c0 .239-.195.435-.434.435h-12.028a.218.218 0 0 0-.217.217v5.89c0 .12.098.218.217.218h10.754c.239 0 .435.195.435.435v1.975c0 .239-.196.435-.435.435h-10.754a.218.218 0 0 0-.217.217v6.23c0 .12.098.217.217.217h11.984c.239 0 .435.196.435.435v2.4c0 .238-.196.434-.435.434h-15.583a.436.436 0 0 1-.435-.435V4.02c0-.238.196-.434.435-.434h.002Z"
                    />

                    <defs>
                      <clipPath id="a">
                        <path fill="#fff" d="M0 .139h199.868v26.933H0z" />
                      </clipPath>
                      <clipPath id="b">
                        <path fill="#fff" d="M-.004 1.063h38.818v25.49H-.004z" />
                      </clipPath>
                    </defs>
                  </svg>
                  <br />
                </>
              ) : (
                word
              )
            )
          }
        </Heading>
      </header>
      <ul class="list">
        {
          pointsList.map(({ text }, i) => (
            <li class="item" style={`animation-duration: ${2300 + i * 400}ms; animation-delay: ${i * 200}ms;`}>
              <div class="icon">
                <Fragment set:html={svgContents[i]} />
              </div>
              <span class="text">{text}</span>
            </li>
          ))
        }
      </ul>
    </div>
    <Image
      class="image"
      {...image}
      sizes="(max-width: 56.25px) 100vw, (max-width: 83.125px) 50vw, 663px"
      priority={index === 0}
    />
    <div class="cta fadeInBottom">
      <div class="content">
        <PortableText value={ctaBox.heading} class="ctaHeading" heading={index === 0 ? 'h2' : 'h3'} />
        <PortableText value={ctaBox.paragraph} class="ctaParagraph" />
      </div>
      <Button {...ctaBox.cta} />
    </div>
  </div>

  <style lang="scss">
    .TwoColumnsImageListCta {
      padding-bottom: clamp(3rem, calc(4vw / 0.48), 4rem);
      background-color: var(--secondary-300, #e3dfd3);
      .container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: repeat(2, auto);
        width: 100%;

        .box {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: clamp(2rem, calc(6vw / 0.48), 6rem) 2rem;

          background-color: var(--tertiary-400, #acc1cf);

          .header {
            max-width: 20.375rem;
            margin-bottom: clamp(2rem, calc(3.5vw / 0.48), 3.5rem);

            .heading {
              color: var(--neutral-900, #141915);

              svg {
                height: clamp(19px, calc(25.5vw / 7.68), 25.5px);
              }
            }
          }

          .list {
            display: flex;
            max-width: 20.375rem;
            flex-direction: column;
            gap: clamp(1.5rem, calc(1.75vw / 0.48), 1.75rem);

            .item {
              display: flex;
              align-items: flex-start;
              gap: clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem);

              opacity: 0;
              transform: translateX(-20px);

              .icon {
                display: flex;
                align-items: center;
                justify-content: center;
                width: 2.25rem;
                height: 2.25rem;
                background-color: var(--tertiary-200, #ccdde9);
                border-radius: 999px;
                flex-shrink: 0;

                :global(svg) {
                  max-width: 20px;
                  max-height: 20px;
                  width: 100%;
                  height: 100%;
                }
              }

              .text {
                color: var(--neutral-900, #141915);
              }
            }
          }
        }

        .image {
          width: 100%;
          height: 100%;
          min-height: 853px;
        }

        .cta {
          grid-column: 1/3;
          justify-self: center;
          max-width: 55.125rem;
          background-color: var(--tertiary-200, #ccdde9);
          border-radius: 8px;
          display: flex;
          align-items: flex-end;
          justify-content: space-between;
          padding: clamp(1.25rem, calc(1.75vw / 0.48), 1.75rem);
          gap: 2rem;
          width: 100%;
          margin-top: -4.25rem;
          opacity: 0;
          transform: translateY(2rem);
          transition:
            opacity 500ms,
            transform 1800ms var(--easing);

          .content {
            max-width: 31.5rem;

            .ctaHeading {
              margin-bottom: 0.75rem;
              font-family: 'Inter', 'Inter Fallback', sans-serif;
              font-size: var(--typography-body-l, 1.125rem);
              font-weight: 400;
              line-height: 1.55;
              letter-spacing: -0.025rem;
              color: var(--neutral-900, #141915);
            }
          }
        }

        .visible {
          .item {
            animation: fadeInLeftItem 400ms var(--easing) forwards;

            @keyframes fadeInLeftItem {
              from {
                opacity: 0;
                transform: translateX(-2rem);
              }
              to {
                opacity: 1;
                transform: translateX(0);
              }
            }
          }
        }

        .visibleBottom {
          opacity: 1;
          transform: translateY(0);
        }

        @media (max-width: 56.25rem) {
          grid-template-columns: 1fr;
          grid-template-rows: repeat(3, auto);

          .box {
            grid-column: 1/2;

            .header,
            .list {
              max-width: 25.625rem;
            }
          }

          .image {
            grid-column: 1/2;
            min-height: none;
            height: auto;
            max-height: clamp(450px, calc(960vw / 7.68), 960px);
          }

          .cta {
            grid-column: 1/2;
            flex-direction: column;
            max-width: 38rem;
            width: calc(100% - 2 * var(--pageMargin));
            align-items: flex-start;
          }
        }

        @media (max-width: 28.75rem) {
          .box {
            padding: 2rem;
          }

          .cta {
            a[data-theme='primary'] {
              width: 100%;
              max-width: 100%;
              justify-content: stretch;

              :global(div) {
                width: 100%;
                flex: 1;
                justify-content: center;
                max-width: 100%;
              }
            }
          }
        }
      }
    }
  </style>
</section>

<script>
  const options = {
    root: null,
    rootMargin: `0px 0px -${window.innerHeight / 10}px 0px`,
  };

  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        if (entry.target.classList.contains('list')) {
          entry.target.classList.add('visible');
        } else if (entry.target.classList.contains('cta')) {
          entry.target.classList.add('visibleBottom');
        }
        observer.unobserve(entry.target);
      }
    });
  }, options);

  document.querySelectorAll('.list, .cta').forEach((element) => {
    observer.observe(element);
  });
</script>
