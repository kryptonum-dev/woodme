---
import Image, { ImageDataQuery, type ImageDataProps } from '@/src/components/ui/image';
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/src/components/ui/portable-text';
import { formatDate } from '@/src/utils/format-date';
import { renderStars } from '@/src/utils/render-stars';
import { optimizeImage } from '@/src/utils/optimize-images';
import VideoPopup from '../ui/videoPopup/VideoPopup';
import ReviewSchema from '@/src/Schema/ReviewSchema.astro';

export const SingleTestimonialSection_Query = `

  _type == "SingleTestimonialSection" => {
    ${PortableTextQuery('heading')}
    testimonial->{
      ${ImageDataQuery('image')}
      video {
        asset-> {
          playbackId,
          data,
          }
      },
      date,
      name,
      service,
      ${PortableTextQuery('review')}
    },
    "googleData": *[_type == "global"][0].googleData {
      rating,
    }
  },
`;

type Props = {
  index: number;
  sectionId?: string;
  heading: PortableTextValue;
  testimonial: {
    image?: ImageDataProps;
    date: string;
    name: string;
    service: string;
    review: PortableTextValue;
    video?: {
      asset: {
        playbackId: string;
        data: {
          aspect_ratio: string;
          tracks: {
            max_width: number;
          }[];
        };
      };
    };
  };
  googleData?: {
    rating: number;
  };
};

const { index, sectionId, heading, testimonial, googleData } = Astro.props;

const hasVideo = !!testimonial?.video;

const thumbnail = await optimizeImage(
  `https://image.mux.com/${testimonial.video?.asset.playbackId}/thumbnail.jpg`,
  274,
  343
);

const review = [
  {
    date: testimonial.date,
    name: testimonial.name,
    service: testimonial.service,
    review: testimonial.review,
  },
];
---

<ReviewSchema reviews={review} slot="head" />
<section class="SingleTestimonialSection max-width" id={sectionId} data-has-video={hasVideo}>
  <header class="header">
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
  </header>
  <div
    class="container"
    data-aspect-ratio={testimonial.video?.asset.data.aspect_ratio}
    data-max-width={testimonial.video?.asset.data.tracks[0].max_width}
    data-name={testimonial.name}
    data-playback-id={testimonial.video?.asset.playbackId}
  >
    {
      hasVideo ? (
        <VideoPopup
          client:load
          playbackId={testimonial.video?.asset.playbackId || ''}
          name={`${testimonial.name} - filmik z opinii`}
          aspectRatio={testimonial.video?.asset.data.aspect_ratio || ''}
          maxWidth={testimonial.video?.asset.data.tracks[0].max_width || 0}
          buttonText="Zobacz opinie"
        >
          <img
            src={thumbnail.src}
            srcset={thumbnail.srcSet.attribute}
            sizes="(max-width: 31.25rem) 95vw, 286px"
            alt={`Minitaruka opinii`}
            fetchpriority={index === 0 ? 'high' : 'auto'}
            loading={index === 0 ? 'eager' : 'lazy'}
          />
        </VideoPopup>
      ) : (
        <div class="text">
          <PortableText value={testimonial.review} class="review" />
          <time class="date">{formatDate(new Date(testimonial.date))}</time>
        </div>
      )
    }
    <div class="info">
      {
        googleData && (
          <div class="rating">
            <div class="stars">
              <Fragment set:html={renderStars(googleData.rating)} />
            </div>
            <span class="rating__text">{googleData?.rating.toFixed(1)}</span>
          </div>
        )
      }
      <div class="person" data-image={!!testimonial.image}>
        {testimonial.image && <Image class="photo" {...testimonial.image} sizes="52px" data-no-rating={!googleData} />}
        <span class="name">{testimonial.name}</span>
        <span class="service">{testimonial.service}</span>
      </div>
    </div>
  </div>
</section>

<style lang="scss">
  .SingleTestimonialSection {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    .header {
      text-align: start;

      .heading {
        font-size: var(--typography-heading-s, 1.375rem);
        color: var(--tertiary-600, #4a5f6e);
        line-height: 1.6;

        strong {
          color: var(--neutral-900, #141915);
        }
      }
    }

    .container {
      display: flex;
      align-items: flex-start;
      justify-content: space-between;
      gap: 3rem;
      padding: clamp(1.5rem, calc(2.5vw / 0.48), 2.5rem);
      border-radius: 6px;
      background-color: var(--tertiary-200, #ccdde9);
      width: 100%;

      .text {
        max-width: 41.25rem;
        .review {
          margin-bottom: clamp(3rem, calc(4vw / 0.48), 6rem);
          font-style: italic;
          font-size: var(--typography-body-2xl, 1.5rem);
        }

        .date {
          font-size: var(--typography-body-m, 0.875rem);
        }
      }

      .info {
        display: flex;
        align-items: center;
        justify-content: space-between;
        max-width: clamp(18rem, calc(18vw / 0.48), 27.375rem);
        width: 100%;
        flex-shrink: 0;
        position: relative;

        .rating {
          padding: 0.375rem 0.5rem 0.25rem;
          border-radius: 4px;
          background-color: var(--neutral-100, #f2faf6);
          display: flex;
          flex-direction: column;
          gap: 0.375rem;
          align-items: center;
          .stars {
            display: flex;
            align-items: center;
            gap: 3px;
          }

          &__text {
            font-size: var(--typography-body-m, 0.875rem);
          }
        }

        .person {
          display: grid;
          grid-template-columns: 52px 1fr;
          grid-template-rows: repeat(2, auto);
          column-gap: 1rem;

          .photo {
            width: 52px;
            height: 52px;
            border-radius: 50%;
            border: 1px solid var(--neutral-200, #e9f2ed);
            overflow: hidden;
            grid-row: 1 / 3;

            &[data-no-rating='true'] {
              margin-bottom: 1rem;
            }
          }

          .name {
            grid-row: 1 / 2;
            grid-column: 2 / 3;
            color: var(--neutral-900, #141915);
          }

          .service {
            grid-row: 2 / 3;
            grid-column: 2 / 3;
            font-size: var(--typography-body-m, 0.875rem);
          }
        }
      }

      @media (max-width: 31.25rem) {
        padding-bottom: 3rem;
        .rating {
          position: absolute;
          bottom: 0;
          left: 50%;
          transform: translate(-50%, 4.375rem);
        }
      }
    }

    @media (max-width: 64rem) {
      max-width: 38rem;
      gap: 1.25rem;

      .container {
        flex-direction: column;
        gap: clamp(4rem, calc(5vw / 0.48), 5rem);
        align-items: flex-start;

        .info {
          max-width: 27.375rem;

          .person {
            display: flex;
            flex-direction: column;
          }
        }
      }
    }

    @media (max-width: 31.25rem) {
      .container {
        .info {
          .person {
            align-items: center;
            width: 100%;
            justify-content: center;
          }
        }
      }
    }

    &[data-has-video='true'] {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;

      .header {
        max-width: 13.5rem;
      }

      .container {
        max-width: 48.25rem;
        padding: 0;
        overflow: hidden;
        align-items: stretch;

        :global(.thumbnail) {
          width: 274px;
          height: 343px;
        }

        .info {
          flex-direction: column;
          justify-content: space-between;
          gap: 2rem;
          align-items: flex-end;
          padding: clamp(1.5rem, calc(2.5vw / 0.48), 2.5rem);
        }
      }

      @media (max-width: 64rem) {
        flex-direction: column;
        align-items: flex-start;
        gap: clamp(2rem, calc(8vw / 0.48), 8rem);

        .header {
        }

        .container {
          flex-direction: row;
          gap: 0;

          :global(.thumbnail) {
            flex-shrink: 0;
          }

          .info {
            flex-shrink: 1;
          }
        }
      }

      @media (max-width: 45rem) {
        .container {
          .info {
            .person {
              align-self: flex-start;
              grid-template-columns: 1fr;

              .photo {
                grid-row: 1 / 2;
                margin-bottom: 0.5rem;
              }
              .name {
                grid-row: 2 / 3;
                grid-column: 1 / 2;
              }

              .service {
                grid-row: 3 / 4;
                grid-column: 1 / 2;
              }
            }
          }
        }
      }

      @media (max-width: 31.25rem) {
        .container {
          overflow: visible;
          flex-direction: column;

          :global(.thumbnail) {
            width: 100%;

            height: auto;
            aspect-ratio: 328 / 411;
            max-height: none;
          }

          .info {
            padding: 1.5rem 1.5rem 3rem;

            .rating {
              transform: translate(-50%, 1.75rem);
            }
          }
        }
      }
    }
  }
</style>
