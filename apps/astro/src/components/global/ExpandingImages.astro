---
import { splitHeading } from '@/src/utils/split-heading';
import { ButtonDataQuery, type ButtonDataProps } from '../ui/button';
import Button from '../ui/button/Button.astro';
import Image, { ImageDataQuery, type ImageDataProps } from '../ui/image';
import PortableText, { PortableTextQuery, type PortableTextValue } from '../ui/portable-text';

export const ExpandingImages_Query = `
  _type == "ExpandingImages" => {
  ${ImageDataQuery('images[]')}
  ${PortableTextQuery('heading')}
  ${PortableTextQuery('paragraph')}
  ${ButtonDataQuery('ctas[]')}
  },
`;

type Props = {
  index: number;
  sectionId?: string;
  images: ImageDataProps[];
  heading: PortableTextValue;
  paragraph: PortableTextValue;
  ctas: ButtonDataProps[];
};

const { index, sectionId, heading, paragraph, images, ctas } = Astro.props;

const getSizes = (i: number) => {
  if ([0, 4, 5, 9, 10, 14].includes(i)) return '(max-width: 36.25rem) 112px, (max-width: 64rem) 5vw, 202px';
  if ([1, 3, 6, 8, 11, 13].includes(i)) return '(max-width: 36.25rem) 159px, (max-width: 64rem) 28vw, 283px';
  if ([2, 7, 12].includes(i)) return '(max-width: 36.25rem) 193px, (max-width: 64rem) 34vw, 343px';

  return '0';
};

const Heading = index === 0 ? 'h1' : 'h2';
const headingDelay = splitHeading(heading).length * 150 - splitHeading(heading).length * 10 + 40;
---

<section class="ExpandingImages" id={sectionId}>
  <div class="container">
    <header class="header">
      <Heading class="heading">
        {
          splitHeading(heading).map((item: any, i: number) => (
            <>
              {i === 0 ? '' : ' '}
              {item.marks.includes('strong') ? (
                <strong style={`animation-delay: ${i * 150 - i * 10}ms`}>{item.text}</strong>
              ) : (
                <span style={`animation-delay: ${i * 150 - i * 10}ms`}>{item.text}</span>
              )}
            </>
          ))
        }</Heading
      >
      <PortableText value={paragraph} style={`animation-delay: ${headingDelay}ms`} class="paragraph" />
    </header>
    <div class="images">
      <div class="marquee">
        <ul>
          {
            [...images, ...images, ...images].map((image, i) => (
              <li
                style={`animation-delay: ${i - 5 === 2 ? headingDelay : i - 5 === 0 || i - 5 === 4 ? headingDelay + 200 : headingDelay + 100}ms; ${i < 5 || i > 9 ? 'animation: none; transform: translateY(1.125rem); opacity: 1;' : ''}`}
                class="image"
              >
                <Image
                  {...image}
                  sizes={getSizes(i)}
                  loading={index === 0 && i > 4 && i < 10 ? 'eager' : 'lazy'}
                  fetchpriority={i === 7 && index === 0 ? 'high' : 'auto'}
                />
              </li>
            ))
          }
        </ul>
      </div>
    </div>
    <div class="ctas" style={`animation-delay: ${headingDelay + 200}ms`}>
      <Button {...ctas[0]} />
      {ctas[1] && <Button {...ctas[1]} />}
    </div>
  </div>
</section>

<style lang="scss">
  .ExpandingImages {
    padding-top: 1rem;

    .container {
      display: flex;
      width: calc(100% - 2 * clamp(0.5rem, calc(0.5vw * 0.48), 1.25rem));
      max-width: 82.875rem;
      flex-direction: column;
      align-items: center;
      margin: 0 auto;
      border-radius: 12px;
      background-color: var(--secondary-300, #e3dfd3);
      padding: clamp(1.5rem, calc(4.5vw / 0.48), 4.5rem) var(--pageMargin) 0;
      gap: 5rem;
      overflow: hidden;
      position: relative;

      .header {
        max-width: clamp(38rem, calc(38vw / 0.48), 55.125rem);
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;

        .heading {
          margin-bottom: clamp(1.5rem, calc(2.25vw / 0.48), 2.25rem);
          font-size: var(--typography-heading-xl, 3.25rem);
          letter-spacing: -0.04em;
          line-height: 1;

          strong {
            color: var(--neutral-900, #5f6d62);
          }

          span,
          strong {
            display: inline-block;
            opacity: 0;
            transform: translateY(1rem);
          }
        }

        .paragraph {
          max-width: clamp(38rem, calc(38vw / 0.48), 41.25rem);
          opacity: 0;
          transform: translateY(1rem);
        }
      }

      .images {
        gap: clamp(0.5rem, calc(0.75vw / 0.48), 1rem);
        transform: translateY(0.5rem);
        align-self: center;
        position: relative;
        will-change: transform;

        &::before {
          content: '';
          position: absolute;
          bottom: 0;
          left: 0;
          width: calc(100% + 2 * var(--pageMargin));
          height: 100%;
          z-index: 5;
          margin: 0 calc(-1 * var(--pageMargin));
          background-image: linear-gradient(0deg, rgba(227, 223, 211, 1) -10%, rgba(227, 223, 211, 0) 60%);
        }

        .marquee {
          width: fit-content;
          max-width: none;
          animation: ExpandingImages-marquee 24s linear infinite;
          animation-play-state: paused;

          @keyframes ExpandingImages-marquee {
            0% {
              transform: translate3d(0px, 0px, 0px);
            }
            100% {
              transform: translate3d(calc(-100% / 3 - clamp(0.2rem, calc(0.375vw / 0.48), 0.375rem)), 0px, 0px);
            }
          }
          ul {
            display: flex;
            align-items: flex-end;
            gap: clamp(0.5rem, calc(0.75vw / 0.48), 1rem);
          }

          &.animation-started {
            animation-play-state: running;
          }
        }

        .image {
          border-radius: 8px;
          overflow: hidden;
          flex-shrink: 0;
          opacity: 0;
          will-change: transform, opacity;

          img {
            height: 100%;
          }
          &:nth-of-type(1),
          &:nth-of-type(5),
          &:nth-of-type(6),
          &:nth-of-type(10),
          &:nth-of-type(11),
          &:nth-of-type(15) {
            width: clamp(112px, calc(151vw / 7.68), 202px);
            height: clamp(143px, calc(189vw / 7.68), 252px);
          }

          &:nth-of-type(2),
          &:nth-of-type(4),
          &:nth-of-type(7),
          &:nth-of-type(9),
          &:nth-of-type(12),
          &:nth-of-type(14) {
            width: clamp(159px, calc(212vw / 7.68), 283px);
            height: clamp(199px, calc(265vw / 7.68), 354px);
          }

          &:nth-of-type(3),
          &:nth-of-type(8),
          &:nth-of-type(13) {
            width: clamp(193px, calc(257vw / 7.68), 343px);
            height: clamp(257px, calc(343vw / 7.68), 457px);
          }
        }
      }

      .ctas {
        position: absolute;
        bottom: 3rem;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        padding: 0.75rem 1.25rem;
        background-color: #acc1cf;
        border-radius: 2px;
        align-items: center;
        opacity: 0;
      }

      @media (max-width: 64rem) {
        gap: 8rem;

        .images {
          transform: translate(0);
        }
      }

      @media (max-width: 37.5rem) {
        gap: 6rem;

        .ctas {
          animation-duration: 2100ms;
        }
      }

      @media (max-width: 27.5rem) {
        gap: 11rem;
        padding-top: 2.5rem;
        margin-top: -1rem;
        width: 100%;
        border-radius: 0 0 8px 8px;

        .header {
          text-align: start;
        }

        .ctas {
          width: 100%;
          max-width: 19.875rem;
          bottom: 1.125rem;

          a[data-theme='primary'] {
            width: 100%;
            max-width: 100%;
            justify-content: stretch;

            :global(div) {
              width: 100%;
              flex: 1;
              justify-content: center;
              max-width: 100%;
            }
          }
        }

        .images {
          transform: translateY(-7.5rem);
          overflow: hidden;

          .marquee {
            animation-duration: 16s;
          }
        }
      }
    }
    @media (max-width: 27.5rem) {
      padding-top: 0;
      margin-bottom: 3rem;
    }

    &.animation-started {
      .container {
        .header {
          .heading {
            span,
            strong {
              animation: ExpandingImages_heading 2800ms var(--easing) forwards;
            }

            @keyframes ExpandingImages_heading {
              0% {
                opacity: 0;
                transform: translateY(2.5rem);
              }
              100% {
                opacity: 1;
                transform: translateY(0);
              }
            }
          }

          .paragraph {
            animation: ExpandingImages_paragraph 2800ms var(--easing) forwards;

            @keyframes ExpandingImages_paragraph {
              0% {
                opacity: 0;
                transform: translateY(0.75rem);
              }
              100% {
                opacity: 1;
                transform: translateY(0);
              }
            }
          }
        }

        .images {
          .image {
            animation: ExpandingImages_img 2800ms var(--easing) forwards;

            @keyframes ExpandingImages_img {
              0% {
                opacity: 0;
                transform: translateY(clamp(2rem, calc(3.5vw / 0.48), 5rem));
              }
              100% {
                opacity: 1;
                transform: translateY(1.125rem);
              }
            }
          }
        }

        .ctas {
          animation: ExpandingImages_ctas 3400ms var(--easing) forwards;

          @keyframes ExpandingImages_ctas {
            0% {
              opacity: 0;
              transform: translate(-50%, clamp(1.5rem, calc(2vw / 0.48), 3rem));
            }
            100% {
              opacity: 1;
              transform: translate(-50%, 0);
            }
          }
        }
      }
    }
  }
</style>

<script>
  document.querySelectorAll('.ExpandingImages').forEach((section) => {
    function init() {
      section.classList.add('animation-started');

      setTimeout(() => {
        section.querySelector('.marquee')!.classList.add('animation-started');
      }, 1000);
    }

    if (document.documentElement.classList.contains('fresh-visit')) {
      init();
    } else {
      window.addEventListener('splashscreen:complete', () => {
        init();
      });
    }
  });
</script>
