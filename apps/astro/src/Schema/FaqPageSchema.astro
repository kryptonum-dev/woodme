---
import type { PortableTextValue } from '@/src/components/ui/portable-text';
import { DOMAIN } from '@/global/constants';
import sanityFetch from '@/utils/sanity.fetch';

const pathname = Astro.url.pathname.split('/').filter(Boolean)[0];

const { slug: _slug } = Astro.params;

const slug = `/${pathname}${_slug ? `/${_slug}` : ''}`;

const page = await sanityFetch<{
  components: {
    _type: string;
    faqItems: {
      question: string;
      answer: PortableTextValue;
    }[];
  }[];
}>({
  query: `
    *[slug.current == $slug][0] {
      components[] {
        _type,
        faqItems[]-> {
          question,
          answer
        }
      }
    }
  `,
  params: { slug },
});

if (!page?.components) return null;

const faqItems = page.components
  .filter((component) => component._type === 'Faq')
  .flatMap((component) => component.faqItems || [])
  .filter((item, index, self) => index === self.findIndex((t) => t.question === item.question));

if (faqItems.length === 0) return null;

const schemas = faqItems.map((item) => ({
  '@context': 'https://schema.org',
  '@type': 'Question',
  '@id': `${DOMAIN}/#faq-question/${crypto.randomUUID()}`,
  name: item.question,
  acceptedAnswer: {
    '@type': 'Answer',
    text: Array.isArray(item.answer) ? item.answer.map((block: any) => block.children?.[0]?.text || '').join(' ') : '',
  },
}));
---

{schemas.map((schema) => <script is:inline type="application/ld+json" set:html={JSON.stringify(schema)} />)}
