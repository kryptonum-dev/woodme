---
export const slugPrefix = '/realizacje';

import sanityFetch from '@/src/utils/sanity.fetch';
import Components, { Components_Query } from '@/src/components/Components.astro';
import Layout from '@/src/layouts/Layout.astro';
import Breadcrumbs from '@/src/layouts/Breadcrumbs.astro';
import Hero, { Hero_Query } from '@/src/components/Project/Single/Hero.astro';
import { fetchPageData } from '@/src/utils/fetch-page-data';
import type { PortableTextValue } from '@/src/components/ui/portable-text';
import type { Props as ProjectCardProps } from '@/src/components/ui/ProjectCard.astro';
import type { ComponentsProps } from '@/src/components/Components.astro';
import { Faq_Questions_Query } from '@/src/components/global/Faq/Faq.astro';
import { fetchSingleReview } from '@/src/utils/reviews.fetch';

export const projects = await sanityFetch<{ slug: string }[]>({
  query: `
    *[_type == 'Project_Collection'][] {
      "slug": slug.current,
    }
  `,
});

export async function getStaticPaths() {
  return projects?.map(({ slug }) => ({ params: { slug: slug.replace(slugPrefix, '') } }));
}

export type QueryProps = {
  name: string;
  slug: string;
  footerBackground: string;
  heading: PortableTextValue;
  totalProjects: number;
  totalProjectsByCategory: number;
  categories: { name: string; slug: string; count: number }[];
  listing: ProjectCardProps[];
  components: ComponentsProps;
};

const { slug: _slug } = Astro.params;

const slug = `${slugPrefix}/${_slug}`;

if (!projects.find(({ slug }) => slug === slug)) return Astro.rewrite('/404');

const data = await fetchPageData(
  'Project_Collection',
  `*[_type == 'Project_Collection' && slug.current == $slug][0] {
      "slug": slug.current,
      ${Hero_Query}
      ${Components_Query}
      "footerBackground": components[-1].background,
      ${Faq_Questions_Query}
    }`,
  { slug: slug }
);

if (!data) return Astro.rewrite('/404');

const { page, metadata, faqItems } = data as typeof data & { page: QueryProps };

// Fetch single review from components
const singleReview = await fetchSingleReview(page.components);
---

<Layout
  {...metadata}
  footerBackground={page.footerBackground}
  faqItems={faqItems}
  reviews={singleReview ? [singleReview] : undefined}
>
  <Breadcrumbs
    data={[
      { name: 'Realizacje', path: slugPrefix },
      { name: page.name, path: slug },
    ]}
    firstItemType="Single_Project"
  />
  <Hero {...page} />
  <Components data={page.components} hasPreviousSections={true} />
</Layout>
