---
export const slugPrefix = '/blog/';

import Content, { Content_Query, type ContentProps } from '@/src/components/Blog/Post/index.astro';
import sanityFetch from '@/src/utils/sanity.fetch';
import Components, { Components_Query, type ComponentsProps } from '@/src/components/Components.astro';
import Layout from '@/src/layouts/Layout.astro';
import Breadcrumbs from '@/src/layouts/Breadcrumbs.astro';
import { Hero_Query, type HeroProps } from '@/src/components/Blog/Post/Hero.astro';
import { fetchPageData } from '@/src/utils/fetch-page-data';
import { Faq_Questions_Query } from '@/src/components/global/Faq/Faq.astro';

export const blogPosts = await sanityFetch<{ slug: string }[]>({
  query: `
    *[_type == 'BlogPost_Collection'][] {
      "slug": slug.current,
    }
  `,
});
export async function getStaticPaths() {
  return blogPosts?.map(({ slug }) => ({ params: { slug: slug.replace(slugPrefix, '') } }));
}

type QueryProps = {
  name: string;
  hero: HeroProps;
  content: ContentProps;
  components: ComponentsProps;
  footerBackground: string;
};

const { slug: _slug } = Astro.params;
const slug = `${slugPrefix}${_slug}`;

if (!blogPosts.find(({ slug }) => slug === slug)) return Astro.rewrite('/404');

const data = await fetchPageData(
  'BlogPost_Collection',
  `*[_type == 'BlogPost_Collection' && slug.current == $slug][0] {
  name,
  "slug": slug.current,
  ${Hero_Query}
  ${Content_Query}
  ${Components_Query}
  "footerBackground": components[-1].background,
  ${Faq_Questions_Query}
}`,
  { slug: slug }
);

if (!data) return Astro.rewrite('/404');

const { page, metadata, faqItems } = data as typeof data & { page: QueryProps };
---

<Layout footerBackground={page.footerBackground} {...metadata} faqItems={faqItems}>
  <Breadcrumbs
    data={[
      { name: 'Blog', path: slugPrefix },
      { name: page.name, path: slug },
    ]}
    firstItemType="BlogPost_View"
  />
  <Content {...page.content} hero={page.hero} />
  <Components data={page.components} hasPreviousSections={true} />
</Layout>
