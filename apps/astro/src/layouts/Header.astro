---
import imageToInlineSvg from '../components/ui/image/image-to-inline-svg';
import sanityFetch from '../utils/sanity.fetch';
import { ImageDataQuery, type ImageDataProps } from '../components/ui/image';

const data = await sanityFetch<{
  tel: string;
  email: string;
  openHours: {
    from: string;
    to: string;
    closedWeekends: boolean;
  };
  navigation: {
    annotation: { icon: string; text: string; visible: boolean };
    header: {
      highlistedProjects: { title: string; slug: string; image: ImageDataProps }[];
      links: {
        linksLeft: { title: string; slug: string }[];
        linksRight: { title: string; slug: string }[];
      };
    };
  };
}>({
  query: `
    *[_type == "global"][0]{
        tel,
        email,
        openHours,
        navigation{
            annotation{
                "icon": icon.asset -> url,
                text,
                visible
            },
            header{
              highlistedProjects[] -> {
                name,
                "slug": slug.current,
                ${ImageDataQuery('image')}
              },
              links{
                linksLeft[] {
                  title,
                  "slug": reference->slug.current,
                },
                linksRight[] {
                  title,
                  "slug": reference->slug.current,
                },
              },
            },
              
        },
    }
`,
});

const svgContent = data?.navigation?.annotation?.icon ? await imageToInlineSvg(data.navigation.annotation.icon) : null;

const formatTime = (time: string) => {
  const [hours, minutes] = time.split(':').map(Number);
  return minutes === 0 ? `${hours}` : `${hours}:${minutes}`;
};

const OpenHoursText = {
  days: data.openHours.closedWeekends ? 'Pon.-Pt.' : 'Codziennie',
  time: `${formatTime(data.openHours.from)} - ${formatTime(data.openHours.to)}`,
};

const pathname = Astro.url.pathname;
---

<!-- <a class="skip-link" href="#main">Przejdź do treści głównej</a> -->{
  data?.navigation.annotation.visible && (
    <aside class="annotation">
      <div class="container max-width">
        <a href={`tel:${data?.tel}`} class="tel">
          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="none">
            <>
              <g clip-path="url(#a)">
                <path
                  stroke="#87988B"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.25"
                  d="M8.196 3.5A2.917 2.917 0 0 1 10.5 5.804M8.196 1.167a5.25 5.25 0 0 1 4.637 4.631M5.966 8.087a8.518 8.518 0 0 1-1.66-2.34.99.99 0 0 1-.067-.154.61.61 0 0 1 .086-.503c.028-.04.061-.073.128-.14.204-.203.306-.305.373-.408a1.167 1.167 0 0 0 0-1.272c-.067-.102-.169-.204-.373-.408l-.114-.114c-.31-.31-.465-.465-.631-.549a1.167 1.167 0 0 0-1.053 0c-.167.084-.322.24-.632.55l-.092.091c-.309.31-.463.464-.581.674a1.97 1.97 0 0 0-.224.862c0 .24.047.405.14.735.503 1.77 1.45 3.439 2.843 4.832a11.107 11.107 0 0 0 4.833 2.843c.329.093.493.14.734.14.268.002.63-.093.863-.224.21-.118.364-.272.673-.581l.092-.092c.31-.31.465-.465.55-.631a1.167 1.167 0 0 0 0-1.054c-.085-.166-.24-.321-.55-.631l-.114-.114c-.204-.204-.306-.306-.408-.372a1.167 1.167 0 0 0-1.272 0c-.102.066-.204.168-.408.372-.067.067-.1.1-.14.128a.61.61 0 0 1-.502.086c-.046-.013-.083-.03-.155-.066a8.518 8.518 0 0 1-2.34-1.66Z"
                />
              </g>
              <defs>
                <clipPath id="a">
                  <path fill="#fff" d="M0 0h14v14H0z" />
                </clipPath>
              </defs>
            </>
          </svg>
          <span class="number">{data?.tel}</span>
          <span class="hours">{`${OpenHoursText.days} ${OpenHoursText.time}`}</span>
        </a>
        <a href={`mailto:${data?.email}`} class="email">
          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="none">
            <path
              stroke="#87988B"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.25"
              d="M1.167 4.083 5.93 7.417c.385.27.578.405.788.458.185.046.379.046.564 0 .21-.053.403-.188.788-.458l4.763-3.334m-8.866 7.584h6.066c.98 0 1.47 0 1.845-.191a1.75 1.75 0 0 0 .765-.765c.19-.374.19-.864.19-1.844V5.133c0-.98 0-1.47-.19-1.844a1.75 1.75 0 0 0-.765-.765c-.374-.19-.865-.19-1.845-.19H3.967c-.98 0-1.47 0-1.845.19a1.75 1.75 0 0 0-.765.765c-.19.374-.19.864-.19 1.844v3.734c0 .98 0 1.47.19 1.844.168.33.436.597.765.765.375.19.865.19 1.845.19Z"
            />
          </svg>
          <span class="address">{data?.email}</span>
        </a>
        <div class="annotationContent">
          <>
            <Fragment set:html={svgContent} />
            <span class="annotationText">{data.navigation.annotation.text}</span>
          </>
        </div>
      </div>
    </aside>
  )
}
<header class="header">
  <div class="headerContainer max-width">
    <nav class="links links__left">
      <button class="headerLink">
        <span>Realizacje</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="none">
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.25"
            d="m3 4.5 3 3 3-3"
          >
          </path>
        </svg>
      </button>
      {
        data.navigation.header.links.linksLeft.map((link) => (
          <a href={link.slug} class="headerLink" data-current={pathname === link.slug}>
            {link.title}
          </a>
        ))
      }
      <div class="highlight"></div>
    </nav>
    <a href="/" class="logo" aria-label="Przejdź do strony głównej">
      <svg xmlns="http://www.w3.org/2000/svg" width="141" height="20" fill="none"
        ><g
          ><g
            ><path
              fill="#68746B"
              d="M26.521 6.815 24.123 4.15l-2.65-2.119A3.758 3.758 0 0 0 18.814.93H8.574c-.996 0-1.953.397-2.658 1.101l-2.65 2.12L.866 6.814C.162 7.519.002 8.477.002 9.472v9.174c0 .145.118.264.264.264h2.746a.264.264 0 0 0 .264-.264V5.767A1.61 1.61 0 0 1 4.448 4.22c.141-.041.29-.057.437-.057h8.681L11.18 6.815c-.706.706-.865 1.662-.865 2.657v9.174c0 .145.118.264.264.264h2.746a.264.264 0 0 0 .264-.264V5.767A1.61 1.61 0 0 1 14.76 4.22c.141-.041.29-.057.437-.057h7.306c.147 0 .296.016.437.057a1.61 1.61 0 0 1 1.173 1.548v12.88c0 .146.118.264.264.264h2.746a.264.264 0 0 0 .264-.264V9.474c0-.996-.16-1.953-.866-2.657v-.002Z"
            ></path></g
          ><path
            fill="#48514A"
            d="M42.299 18.462h-3.383a.307.307 0 0 1-.296-.225L34.452 3.098a.307.307 0 0 1 .295-.388h2.26c.14 0 .263.097.297.235l1.738 7.133c.44 2.026.88 3.964 1.263 5.985a.153.153 0 0 0 .15.124h.553a.153.153 0 0 0 .15-.126c.382-2.076.765-3.957 1.263-5.983l1.884-7.14a.306.306 0 0 1 .296-.228h2.967c.14 0 .262.095.297.23l1.855 7.168c.469 1.938.881 3.903 1.263 5.953a.154.154 0 0 0 .15.126h.495a.153.153 0 0 0 .15-.124c.383-1.994.823-3.932 1.263-5.986l1.709-7.132a.306.306 0 0 1 .297-.235h2.11c.202 0 .349.192.295.387l-4.11 15.138a.308.308 0 0 1-.296.227h-3.502a.305.305 0 0 1-.298-.234l-1.53-6.354c-.468-1.94-1.083-4.628-1.472-6.793a.151.151 0 0 0-.15-.125h-.315a.151.151 0 0 0-.15.123c-.42 2.167-1.062 4.855-1.53 6.795l-1.501 6.352a.307.307 0 0 1-.3.236ZM57.08 10.555c0-4.94 3.052-8.175 8.226-8.175 5.174 0 8.227 3.234 8.227 8.175 0 4.941-2.932 8.237-8.227 8.237s-8.226-3.325-8.226-8.237Zm13.79-.029c0-3.474-1.765-5.84-5.563-5.84-3.797 0-5.563 2.366-5.563 5.84 0 3.474 1.735 5.96 5.563 5.96 3.829 0 5.564-2.366 5.564-5.96ZM74.578 10.555c0-4.94 3.052-8.175 8.226-8.175 5.174 0 8.227 3.234 8.227 8.175 0 4.941-2.932 8.237-8.227 8.237s-8.226-3.325-8.226-8.237Zm13.79-.029c0-3.474-1.765-5.84-5.563-5.84s-5.563 2.366-5.563 5.84c0 3.474 1.735 5.96 5.563 5.96 3.829 0 5.564-2.366 5.564-5.96ZM92.588 3.017c0-.169.138-.307.306-.307h6.215c5.654 0 8.317 2.756 8.317 7.757 0 5-3.141 7.995-8.288 7.995h-6.244a.308.308 0 0 1-.306-.306V3.016Zm2.691 2.062v11.014c0 .085.07.154.154.154h3.526c4.158 0 5.803-2.127 5.803-5.78 0-3.864-1.795-5.541-5.984-5.541h-3.347a.154.154 0 0 0-.153.153h.001ZM110.856 18.462h-1.899a.308.308 0 0 1-.307-.307V3.016c0-.168.138-.306.307-.306h3.943c.126 0 .238.076.284.191l2.794 6.936c.411 1.027 1.108 3.118 1.643 4.864.02.065.078.108.146.108h.432a.15.15 0 0 0 .145-.108c.532-1.743 1.174-3.78 1.643-4.955l2.824-6.848a.306.306 0 0 1 .283-.19h3.706c.169 0 .307.138.307.307v15.139a.308.308 0 0 1-.307.307h-2.049a.308.308 0 0 1-.307-.307v-7.301c0-1.774.057-4.057.115-5.833a.152.152 0 0 0-.153-.156h-.326a.151.151 0 0 0-.146.107c-.596 1.926-1.418 4.245-2.21 6.333l-2.553 6.043a.307.307 0 0 1-.282.187h-2.284a.308.308 0 0 1-.284-.19l-2.524-6.13a106.09 106.09 0 0 1-2.092-6.243.151.151 0 0 0-.146-.107h-.239a.152.152 0 0 0-.153.155c.026 1.801-.003 4.03-.003 5.835v7.301a.308.308 0 0 1-.307.307h-.001ZM129.029 2.71h11.023c.168 0 .306.138.306.307v1.662a.308.308 0 0 1-.306.307h-8.485a.154.154 0 0 0-.153.153v4.155c0 .085.069.154.153.154h7.586c.169 0 .307.138.307.307v1.393a.308.308 0 0 1-.307.307h-7.586a.154.154 0 0 0-.153.153v4.395c0 .084.069.153.153.153h8.454c.169 0 .306.138.306.307v1.693a.307.307 0 0 1-.306.306h-10.994a.308.308 0 0 1-.306-.306V3.016c0-.168.138-.306.306-.306h.002Z"
          ></path></g
        ><defs
          ><clipPath id="a"><path fill="#fff" d="M0 .5h141v19H0z"></path></clipPath><clipPath id="b"
            ><path fill="#fff" d="M.001.929h27.385v17.983H.001z"></path></clipPath
          ></defs
        ></svg
      ></a
    >
    <nav class="links links__right">
      {
        data.navigation.header.links.linksRight.map((link) => (
          <a href={link.slug} class="headerLink" data-current={pathname === link.slug}>
            {link.title}
          </a>
        ))
      }
      <div class="highlight"></div>
    </nav>
  </div>
</header>

<style lang="scss">
  .annotation {
    padding: 0.25rem 0;
    background-color: var(--neutral-100, #f2faf6);
    .container {
      display: grid;
      grid-template-columns: auto auto 1fr;
      gap: 0 clamp(1.25rem, calc(2vw / 0.48), 2rem);
      .tel {
        display: grid;
        grid-template-columns: auto auto;
        grid-template-rows: repeat(2, auto);
        align-items: center;
        gap: 0 0.5rem;
        min-height: 2.75rem;

        svg {
          grid-column: 1/2;
          grid-row: 1/3;
        }
        .number {
          grid-column: 2/3;
          grid-row: 1/2;
          font-size: var(--typography-body-s, 0.75rem);
          position: relative;

          &::before {
            content: '';
            position: absolute;
            left: 0;
            bottom: 3px;
            width: 100%;
            height: 1.5%;
            transform: scaleX(0);
            transform-origin: right;
            transition: transform 1200ms var(--easing);
            background-color: var(--neutral-600, #87988b);
          }
        }
        .hours {
          grid-column: 2/3;
          grid-row: 2/3;
          font-size: var(--typography-body-xs, 0.625rem);
          margin-top: -0.875rem;
        }

        &:hover:not(:focus) {
          .number {
            &::before {
              transform: scaleX(1);
              transform-origin: left;
            }
          }
        }

        &:focus:not(:focus-visible) {
          .number {
            &::before {
              background-color: var(--neutral-200, #e9f2ed);
            }
          }
        }

        &:focus-visible {
          outline: 2px solid var(--neutral-700, #5f6d62);
          outline-offset: 2px;
          border-radius: 4px;
        }
      }

      .email {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        min-height: 2.75rem;
        .address {
          font-size: var(--typography-body-s, 0.75rem);
          position: relative;

          &::before {
            content: '';
            position: absolute;
            left: 0;
            bottom: 0px;
            width: 100%;
            height: 1.5%;
            transform: scaleX(0);
            transform-origin: right;
            transition: transform 1200ms var(--easing);
            background-color: var(--neutral-600, #87988b);
          }
        }

        &:hover:not(:focus) {
          .address {
            &::before {
              transform: scaleX(1);
              transform-origin: left;
            }
          }
        }

        &:focus:not(:focus-visible) {
          .address {
            &::before {
              background-color: var(--neutral-200, #e9f2ed);
            }
          }
        }

        &:focus-visible {
          outline: 2px solid var(--neutral-700, #5f6d62);
          outline-offset: 2px;
          border-radius: 4px;
        }
      }

      .annotationContent {
        justify-self: end;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        .annotationText {
          font-size: var(--typography-body-s, 0.75rem);
        }
      }
    }

    @media (max-width: 30rem) {
      .container {
        .annotationContent {
          grid-column: 1/4;
          grid-row: 1/2;
          justify-self: start;
        }
        .tel {
          grid-column: 1/2;
          grid-row: 2/3;
          justify-content: start;
        }
        .email {
          grid-column: 2/3;
          grid-row: 2/3;
        }
      }
    }
  }

  .header {
    padding: clamp(0.125rem, calc(0.25vw / 0.48), 0.25rem) 0;
    background-color: var(--neutral-100, #f2faf6);
    border-radius: 0 0 8px 8px;
    .headerContainer {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      gap: 2rem;
      .links {
        display: flex;
        align-items: center;
        gap: 0.625rem 0;

        position: relative;
        overflow: hidden;

        &__left {
          justify-content: start;
          margin-left: -0.75rem;
        }

        &__right {
          justify-content: end;
          margin-right: -0.75rem;
        }

        .headerLink {
          user-select: none;
          transition: color 300ms;
          padding: 0.375rem 0.75rem;
          min-height: 2.75rem;
          font-size: var(--typography-body-m, 0.875rem);
          position: relative;
          display: flex;
          align-items: center;
          gap: 0.5rem;
          z-index: 2;
          &::after {
            position: absolute;
            border: 2px solid var(--neutral-700, #5f6d62);
            border-radius: 4px;
            width: calc(100% - 0.5rem);
            height: calc(100% - 0.5rem);
            bottom: 50%;
            left: 50%;
            content: '';
            z-index: -1;
            transform: translate(-50%, 50%);
            opacity: 0;
            visibility: hidden;
          }

          &::before {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 1px;
            background-color: var(--neutral-600, #5f6d62);
            transform: scaleX(0);
            transform-origin: center;
            transition: transform 1200ms var(--easing);
          }

          &:focus-visible {
            outline: none;
            &::after {
              opacity: 1;
              visibility: visible;
            }
          }

          &[data-current='true'] {
            &::before {
              animation: scaleX 900ms var(--easing) forwards;

              @keyframes scaleX {
                from {
                  transform: scaleX(0);
                }
                to {
                  transform: scaleX(1);
                }
              }
            }
          }

          &.linkActive {
            color: var(--neutral-100, #f2faf6);
          }
        }
      }

      .logo:focus-visible {
        outline: 2px solid var(--neutral-700, #5f6d62);
        outline-offset: 6px;
        border-radius: 4px;
      }
    }
  }
</style>

<script>
  const linksLeft = document.querySelector('.links__left') as HTMLDivElement;
  const linksLeftArray = document.querySelectorAll('.links__left .headerLink');
  const highlightLeft = document.querySelector('.links__left .highlight') as HTMLDivElement;
  const linksRight = document.querySelector('.links__right') as HTMLDivElement;
  const linksRightArray = document.querySelectorAll('.links__right .headerLink');
  const highlightRight = document.querySelector('.links__right .highlight') as HTMLDivElement;
  const easing = 'cubic-bezier(0.19, 1, 0.22, 1)';

  linksLeftArray.forEach((link) => {
    link.addEventListener('mouseenter', () => {
      const linkX = link.getBoundingClientRect().x;
      const linksLeftX = linksLeft.getBoundingClientRect().x;
      const linkTranslateY = highlightLeft.style.transform.split(', ')[1]?.replace('%)', '');

      if (link.getAttribute('data-current') === 'true') {
        highlightLeft.style.borderRadius = '4px 4px 0 0';
      } else {
        highlightLeft.style.borderRadius = '4px';
      }

      if (!highlightLeft.style.transform) {
        highlightLeft.style.transition = `transform 700ms ${easing}`;
        highlightLeft.style.width = `${link.clientWidth}px`;
        highlightLeft.style.left = `${linkX - linksLeftX}px`;
        highlightLeft.style.transform = `translate(0px, -100%)`;
        return;
      }

      if (linkTranslateY === '0' && highlightLeft.style.transform) {
        highlightLeft.style.transition = `transform 700ms ${easing}`;
        highlightLeft.style.left = `${linkX - linksLeftX - Number(highlightLeft.style.transform.split(', ')[0].split('(')[1].replace('px', ''))}px`;
        highlightLeft.style.width = `${link.clientWidth}px`;
        highlightLeft.style.transform = `translate(${highlightLeft.style.transform.split(', ')[0].split('(')[1]}, -100%)`;
        return;
      }

      if (linkTranslateY !== '0') {
        highlightLeft.style.transition = `transform 700ms ${easing}, width 700ms ${easing}`;
        highlightLeft.style.width = `${link.clientWidth}px`;
        highlightLeft.style.transform = `translate(${linkX - linksLeftX - Number(highlightLeft.style.left.replace('px', ''))}px, -100%)`;
        return;
      }
    });

    link.addEventListener('mouseleave', () => {
      link.classList.remove('linkActive');
      highlightLeft.classList.remove('active');
    });

    link.addEventListener('mousedown', () => {
      link.classList.add('linkActive');
      highlightLeft.classList.add('active');
    });
  });

  linksLeft.addEventListener('mouseleave', () => {
    highlightLeft.style.transform = `translate(${highlightLeft.style.transform.split(', ')[0].split('(')[1]}, 0%)`;
  });

  linksRightArray.forEach((link) => {
    link.addEventListener('mouseenter', () => {
      const linkX = link.getBoundingClientRect().x;
      const linksRightX = linksRight.getBoundingClientRect().x;
      const linkTranslateY = highlightRight.style.transform.split(', ')[1]?.replace('%)', '');

      if (link.getAttribute('data-current') === 'true') {
        highlightRight.style.borderRadius = '4px 4px 0 0';
      } else {
        highlightRight.style.borderRadius = '4px';
      }

      if (!highlightRight.style.transform) {
        highlightRight.style.transition = `transform 700ms ${easing}`;
        highlightRight.style.width = `${link.clientWidth}px`;
        highlightRight.style.left = `${linkX - linksRightX}px`;
        highlightRight.style.transform = `translate(0px, -100%)`;
        return;
      }
      if (linkTranslateY === '0' && highlightRight.style.transform) {
        highlightRight.style.transition = `transform 700ms ${easing}`;
        highlightRight.style.left = `${linkX - linksRightX - Number(highlightRight.style.transform.split(', ')[0].split('(')[1].replace('px', ''))}px`;
        highlightRight.style.width = `${link.clientWidth}px`;
        highlightRight.style.transform = `translate(${highlightRight.style.transform.split(', ')[0].split('(')[1]}, -100%)`;
        return;
      }

      if (linkTranslateY !== '0') {
        highlightRight.style.transition = `transform 700ms ${easing}, width 700ms ${easing}`;
        highlightRight.style.width = `${link.clientWidth}px`;
        highlightRight.style.transform = `translate(${linkX - linksRightX - Number(highlightRight.style.left.replace('px', ''))}px, -100%)`;
        return;
      }
    });

    link.addEventListener('mouseleave', () => {
      link.classList.remove('linkActive');
      highlightRight.classList.remove('active');
    });

    link.addEventListener('mousedown', () => {
      link.classList.add('linkActive');
      highlightRight.classList.add('active');
    });
  });

  linksRight.addEventListener('mouseleave', () => {
    highlightRight.style.transform = `translate(${highlightRight.style.transform.split(', ')[0].split('(')[1]}, 0%)`;
  });
</script>
